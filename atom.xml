<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fatboa</title>
  
  <subtitle>时光醉清风,总有人会记得</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fatboa.co/"/>
  <updated>2019-05-10T10:53:39.744Z</updated>
  <id>https://fatboa.co/</id>
  
  <author>
    <name>fatboa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>rabbitmq消息去重及防丢失解决方案</title>
    <link href="https://fatboa.co/2019/03/22/rabbitmq%E6%B6%88%E6%81%AF%E5%8E%BB%E9%87%8D%E5%8F%8A%E9%98%B2%E4%B8%A2%E5%A4%B1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://fatboa.co/2019/03/22/rabbitmq消息去重及防丢失解决方案/</id>
    <published>2019-03-22T03:38:54.000Z</published>
    <updated>2019-05-10T10:53:39.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>-<br>    <div id="aplayer-YRKcVFLJ" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><br>-</p><blockquote><p>个人笔记，如有描述不当，欢迎留言指出~</p></blockquote><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>我们知道一个电商项目里时刻都有海量的消息通知，比如顾客注册通知、签到通知、下单通知等等，而我们公司的电商项目更加复杂，包含了客户端、门店端以及供应商端三端，各种各样的消息通知游走在各个服务模块间。如果每个模块都要实现一套消息通知的功能，那无疑是多余的。所以我把各模块的消息功能提取出来独立成一个服务模块，就像一个快递员，把各模块的消息准确投递至各端。<br>我采用了自己熟悉的rabbitmq来实现消息功能，<br>当模块开发完交差时，组长冷不丁来了句：消息去重以及防丢失机制实现了没？w(ﾟДﾟ)w好吧，赶紧去实现。</p><h3 id="消息去重"><a href="#消息去重" class="headerlink" title="消息去重"></a>消息去重</h3><p><img src="https://fatboa.gz.bcebos.com/img/posts/rabbitmq消息去重及防丢失解决方案/1553498886542.png?authorization=bce-auth-v1/b6f23434344c421e8a830ea644d98122/2019-03-26T03:51:19Z/-1/host/3d9448bad08563ec4cdcaa7a17f4d2d0b17e954d1b748645069c61bb445b0942" alt="@消息大致流程"><br>依我的经验来看，在消费端去重比较好。因为即使生产端保证投递到rabbitmq上的消息是不重复的，但rabbitmq服务器有可能由于系统或网络原因导致消息重复推送到消费端，所以生产端去重是不可靠的，应当在消费端去重。</p><p>怎么解决呢？我的方案是在生产端投递消息的同时，传入correlationId关联id，在消费端接收消息后，从message的messageProperties中拿到correlationId，再根据correlationId从db中查询是否有相关记录。如果有，则说明这条消息已被我们消费过，直接ack，不进行业务处理；没有，那就把消息内容和correlationId存入表中，然后ack。</p><blockquote><p>这里说明一下，我把消息的接收和业务处理分开来了。消息监听器只负责监听队列消息，并将其存至db中。在另外的任务线程里，从db中取消息记录进去业务处理，如果业务处理中出现异常，结合elasticsearch实现异常报警（这部分还没做，目前还只是记录下错误信息及消息内容）。</p></blockquote><blockquote><p>why?为啥分开处理，其实一开始的设计中消息接收和处理是写在一起的，消息处理成功回复ack，处理异常回复nack。但会有一个严重的问题，但测试环境中，我们发现总有那么几条消息卡在队列里，就因为处理异常回复nack，消息一直在重入队，严重消耗rabbitmq服务器的性能！所以说，大部分异常的消息，都不能指望把消息重推到别的消费端就能处理成功了，所以消息接收和处理分开来是比较好的。</p></blockquote><p>方案是有了，但具体代码怎么实现呢？<br>生产端关键代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String routingKey, String msg)</span> </span>&#123;</span><br><span class="line">      RabbitTemplate rabbitTemplate = applicationContext.getBean(<span class="string">"rabbitTemplate"</span>, RabbitTemplate.class);</span><br><span class="line">      rabbitTemplate.setReturnCallback(<span class="keyword">this</span>);</span><br><span class="line">      log.info(<span class="string">"消息发送内容 : "</span> + msg);</span><br><span class="line">      CorrelationData correlationId = <span class="keyword">new</span> CorrelationData(UUID.randomUUID().toString());</span><br><span class="line">      rabbitTemplate.setConfirmCallback((correlationData, ack, cause) -&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (!ack) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"send error "</span> + cause);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              log.info(<span class="string">"send() 消息发送成功 "</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      rabbitTemplate.convertAndSend(<span class="string">"amq.topic"</span>, routingKey, msg, correlationId);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>我们点开<code>rabbitTemplate.convertAndSend</code>方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convertAndSend</span><span class="params">(String exchange, String routingKey, Object object, CorrelationData correlationData)</span> <span class="keyword">throws</span> AmqpException </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.send(exchange, routingKey, <span class="keyword">this</span>.convertMessageIfNecessary(object), correlationData);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>看到没，convertAndSend方法是以<code>Object</code>来接收消息内容，它内部调用的send方法最终还是把Object类转成<code>Message</code>类<br><img src="https://fatboa.gz.bcebos.com/img/posts/rabbitmq消息去重及防丢失解决方案/1553502343578.png?authorization=bce-auth-v1/b6f23434344c421e8a830ea644d98122/2019-03-26T03:51:55Z/-1/host/d1ed0e35c9c9fb24cc93e02874fe28debab979be5d1b8d722333ee5d6572202b" alt="@Message.java"><br>从上图可以看的出，Message包含了<code>ENCODING</code>（编码方式）、<code>SERIALIZER_MESSAGE_CONVERTER</code>（序列化消息转换器）、<code>messageProperties</code>（消息属性）、<code>body</code>（消息内容），队列里消息存放着这些东东。<br>我们再看看<strong>MessageProperties</strong>里放着什么<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageProperties</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1619000546531112290L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTENT_TYPE_BYTES = <span class="string">"application/octet-stream"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTENT_TYPE_TEXT_PLAIN = <span class="string">"text/plain"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTENT_TYPE_SERIALIZED_OBJECT = <span class="string">"application/x-java-serialized-object"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTENT_TYPE_JSON = <span class="string">"application/json"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTENT_TYPE_JSON_ALT = <span class="string">"text/x-json"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTENT_TYPE_XML = <span class="string">"application/xml"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPRING_BATCH_FORMAT = <span class="string">"springBatchFormat"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BATCH_FORMAT_LENGTH_HEADER4 = <span class="string">"lengthHeader4"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPRING_AUTO_DECOMPRESS = <span class="string">"springAutoDecompress"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String X_DELAY = <span class="string">"x-delay"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CONTENT_TYPE = <span class="string">"application/octet-stream"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MessageDeliveryMode DEFAULT_DELIVERY_MODE;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer DEFAULT_PRIORITY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; headers = <span class="keyword">new</span> HashMap();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Date timestamp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String messageId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String appId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String clusterId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String correlationId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String replyTo;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String contentType = <span class="string">"application/octet-stream"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String contentEncoding;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> contentLength;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> contentLengthSet;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> MessageDeliveryMode deliveryMode;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String expiration;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Integer priority;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Boolean redelivered;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String receivedExchange;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String receivedRoutingKey;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String receivedUserId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> deliveryTag;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> deliveryTagSet;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Integer messageCount;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String consumerTag;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String consumerQueue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Integer receivedDelay;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> MessageDeliveryMode receivedDeliveryMode;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> finalRetryForMessageWithNoId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Type inferredArgumentType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Method targetMethod;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Object targetBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>果然<code>correlationId</code>就在这里，然后看到这里我就没继续深入了，原以为rabbitTemplate.convertAndSend方法会自动将correlationId放入messageProperties中，结果表明我错了。在消费端拿到的correlationId为<code>null</code>。也就是说，convertAndSend方法里correlationId根本就没有被放进去的，大家感兴趣的话可以看看源码，这里就不说了。</p><p>问题找出来就好办了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String routingKey, String msg)</span> </span>&#123;</span><br><span class="line">      RabbitTemplate rabbitTemplate = applicationContext.getBean(<span class="string">"rabbitTemplate"</span>, RabbitTemplate.class);</span><br><span class="line">      rabbitTemplate.setReturnCallback(<span class="keyword">this</span>);</span><br><span class="line">      log.info(<span class="string">"消息发送内容 : "</span> + msg);</span><br><span class="line">      CorrelationData correlationId = <span class="keyword">new</span> CorrelationData(UUID.randomUUID().toString());</span><br><span class="line">      rabbitTemplate.setConfirmCallback((correlationData, ack, cause) -&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (!ack) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"send error "</span> + cause);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              log.info(<span class="string">"send() 消息发送成功 "</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      Message message = MessageBuilder.withBody(msg.getBytes())</span><br><span class="line">              .setContentType(MessageProperties.CONTENT_TYPE_TEXT_PLAIN)</span><br><span class="line">              .setCorrelationId(correlationId.toString())</span><br><span class="line">              .build();</span><br><span class="line">      rabbitTemplate.convertAndSend(<span class="string">"amq.topic"</span>, routingKey, message, correlationId);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>直接构建Message类，手动传入correlationId总行了吧。在消费端从Message里拿到correlationId，再从db查询就行了。好了，到这里去重机制就实现了😁</p><h3 id="消息防丢失"><a href="#消息防丢失" class="headerlink" title="消息防丢失"></a>消息防丢失</h3><p>rabbitmq是支持队列、消息的持久化的。即便rabbitmq突然挂了，那些尚在队列未能推送的消息在rabbitmq重启后也是能够继续推送的，所以丢失问题一般不出现在rabbitmq上。</p><p>rabbitmq将消息从队列推到消费端后，需要有一个回应告诉它队列里的这条消息的去留。主要有两种方式：</p><ul><li>auto: 自动回应，消息在发送给消费端后立即确认</li><li>manual 手动回应，消息消费正常后由消费端返回ack;或消费异常返回nack,将消息重入队；或返回reject,丢弃该条消息</li></ul><p><strong><em>springboot的yaml配置</em></strong><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line"><span class="attr">   host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">   port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">   username:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">   password:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">   publisher-confirms:</span> <span class="literal">true</span> <span class="comment">#开启confirmcallback</span></span><br><span class="line"><span class="attr">   publisher-returns:</span> <span class="literal">true</span> <span class="comment">#开启returncallback</span></span><br><span class="line"><span class="attr">   listener:</span></span><br><span class="line"><span class="attr">     simple:</span></span><br><span class="line"><span class="attr">       acknowledge-mode:</span> <span class="string">manual</span></span><br><span class="line"><span class="attr">     direct:</span></span><br><span class="line"><span class="attr">       acknowledge-mode:</span> <span class="string">MANUAL</span></span><br></pre></td></tr></table></figure></p><p>另外，如果消息在消费的时候，消费端与rabbitmq的连接中断了，那这条消息会被重新放回队列进行推送，这个时候我们的去重机制就起作用了；如果消费的时候，消费端死机了，长时间不回应rabbitmq，这时候我们可以将该消息转至死信队列，防止原队列阻塞。死信队列，这里也不做介绍，有兴趣百度呗。<br>所以消费端出现消息丢失的可能性也不大，问题就可能出在生产端。看看下面这张图<br><img src="https://fatboa.gz.bcebos.com/img/posts/rabbitmq消息去重及防丢失解决方案/1553504804445.png?authorization=bce-auth-v1/b6f23434344c421e8a830ea644d98122/2019-03-26T03:53:09Z/-1/host/09aeca4e5e399a3fefcf467a3bb5eed2f3154ca506790cf53590402c8ae71575" alt="@来源于网络"><br>左边P代表生产端，中间是rabbitmq，右边是消费端，绿色的X是交换机，红色的是队列，用过rabbitmq的小伙伴肯定一目了然了。</p><p>rabbitmq 整个消息投递的路径为：<br><code>producer</code>-&gt;<code>rabbitmq broker cluster</code>-&gt;<code>exchange</code>-&gt;<code>queue</code>-&gt;<code>consumer</code></p><p>生产端投递消息到rabbitmq里，rabbitmq将消息发到交换机中，交换机再根据路由键将消息最终送到队列中，队列取出消息推送到消费端。只有最终抵达队列的消息才是可靠的，不会丢失。所以我们要实现的就是保证生产端的消息务必推送到rabbitmq的队列中。</p><p>那么生产端是怎么知道自己的消费准确投递到了队列中呢？rabbitmq返回了两个回调给生产端。</p><ul><li>message 从 producer 到 rabbitmq broker cluster 则会返回一个 <code>confirmCallback</code> </li><li>message 从 exchange-&gt;queue 投递失败则会返回一个 <code>returnCallback</code> 。我们将利用这两个 callback 控制消息的最终一致性和部分纠错能力。</li></ul><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>生产端在投递消息前，先将消息内容、投递状态、重试次数记录在db中，然后在两个回调中修改记录状态。另外再开一个任务线程去取db中记录的失败消息，进行重新投递。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p><strong><em>失败消息记录实体类：</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2019/2/18 9:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@descripe</span>: 失败消息记录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Entity</span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"t_failure_mq_record"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EntityListeners</span>(AuditingEntityListener.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FailureMqRecord</span> <span class="keyword">extends</span> <span class="title">Uuid</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重试次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"retry_time"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer retryTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息状态 1:投递成功 2：投递失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关联id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String correlationId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"create_time"</span>, updatable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FailureMqRecord</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><em>rabbitmq发送器：</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2019/2/13 9:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@descripe</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqSender</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ReturnCallback</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FailureMqRecordRepository failureMqRecordRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String routingKey, FailureMqRecord failureMqRecord)</span> </span>&#123;</span><br><span class="line">        RabbitTemplate rabbitTemplate = applicationContext.getBean(<span class="string">"rabbitTemplate"</span>, RabbitTemplate.class);</span><br><span class="line">        <span class="comment">//设置当前实例为rabbitmqtemplate的returncallback</span></span><br><span class="line">        rabbitTemplate.setReturnCallback(<span class="keyword">this</span>);</span><br><span class="line">        rabbitTemplate.setConfirmCallback(((correlationData1, ack, cause) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!ack) &#123; <span class="comment">//投递至broker失败</span></span><br><span class="line">                failureMqRecord.setStatus(<span class="number">2</span>);<span class="comment">//设为投递失败</span></span><br><span class="line">                failureMqRecordRepository.save(failureMqRecord);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">        Message message = MessageBuilder.withBody(failureMqRecord.getMessage().getBytes())</span><br><span class="line">                .setContentType(MessageProperties.CONTENT_TYPE_TEXT_PLAIN)</span><br><span class="line">                .setCorrelationId(failureMqRecord.getCorrelationId())</span><br><span class="line">                .build();</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"amq.topic"</span>, routingKey, message, <span class="keyword">new</span> CorrelationData(failureMqRecord.getCorrelationId()));</span><br><span class="line">        failureMqRecord.setStatus(<span class="number">1</span>);<span class="comment">//设为投递成功</span></span><br><span class="line">        failureMqRecord.setRetryTime(failureMqRecord.getRetryTime() + <span class="number">1</span>);<span class="comment">//重试次数+1</span></span><br><span class="line">        failureMqRecordRepository.save(failureMqRecord);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息由exchang未能正确投递到queue时触发回调</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> replyCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> replyText</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> routingKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(Message message, <span class="keyword">int</span> replyCode, String replyText, String exchange, String routingKey)</span> <span class="keyword">throws</span> BusinessException </span>&#123;</span><br><span class="line">        FailureMqRecord mq = failureMqRecordRepository.findByCorrelationId(message.getMessageProperties().getCorrelationId());</span><br><span class="line">        mq.setStatus(<span class="number">2</span>);</span><br><span class="line">        failureMqRecordRepository.save(mq);</span><br><span class="line">        log.error(<span class="string">"审批消息：&#123;&#125; 投递至路由：&#123;&#125;失败"</span>, message.getBody(), routingKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><em>任务线程，实现消息重试机制：</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2019/2/18 10:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: huanglong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@descripe</span>: 消息重发定时器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqScheduler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitMqSender rabbitMqSender;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApprovalMqRepository failureMqRecordRepository;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisDistributedLock redisDistributedLock;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每3分钟执行一次</span></span><br><span class="line"><span class="comment">     * 将投递失败消息重新投递到rabbitmq</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"* */3 * * * ?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;FailureMqRecord&gt; failureMqRecords = failureMqRecordRepository.findAll()</span><br><span class="line">                .stream()</span><br><span class="line">                .filter(failureMqRecord -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (failureMqRecord.getRetryTime() == <span class="number">3</span>) &#123;</span><br><span class="line">                        log.error(<span class="string">"警告！该消息已重投3次失败，请人工处理，消息记录uuid:&#123;&#125;"</span>, failureMqRecord.getUuid());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//过滤出重试次数不超过3次、状态为2的消息记录</span></span><br><span class="line">                    <span class="keyword">if</span> (failureMqRecord.getRetryTime() &lt; <span class="number">3</span> &amp;&amp; failureMqRecord.getStatus() == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        Iterator&lt;FailureMqRecord&gt; mqIterator = failureMqRecords.iterator();</span><br><span class="line">        <span class="keyword">while</span> (mqIterator.hasNext()) &#123;</span><br><span class="line">            FailureMqRecord failureMqRecord = mqIterator.next();</span><br><span class="line">            <span class="comment">//获取🔒,过期时间5秒，不重复获取</span></span><br><span class="line">            <span class="keyword">if</span> (redisDistributedLock.lock(failureMqRecord.getUuid(), <span class="number">5000L</span>, <span class="number">0</span>, <span class="number">1000L</span>)) &#123;</span><br><span class="line">                <span class="comment">// 因为有可能上一个线程刚释放该记录的锁，就被当前先线程获取到该记录的锁，导致记录已被</span></span><br><span class="line">                FailureMqRecord failurelatest = failureMqRecordRepository.findById(failureMqRecord.getUuid()).orElse(<span class="keyword">null</span>);</span><br><span class="line">                ApprovalPushMessage pushMessage = JSON.parseObject(failurelatest.getMessage(), ApprovalPushMessage.class);</span><br><span class="line">                <span class="comment">//当前时间距离该记录最近一次修改时间的间隔，防止上个线程重试过后，当前线程又重试一次</span></span><br><span class="line">                <span class="keyword">long</span> lastUpdatePeriod = System.currentTimeMillis() - failurelatest.getUpdateTime().getTime(); <span class="comment">//距离上次更新间隔</span></span><br><span class="line">                <span class="comment">//重判断记录是否符合条件,重试次数小于3、状态为投递失败、距离上次重试不能少于2分钟</span></span><br><span class="line">                <span class="keyword">if</span> (failurelatest.getRetryTime() &lt; <span class="number">3</span> &amp;&amp; failurelatest.getStatus() == <span class="number">2</span> &amp;&amp; lastUpdatePeriod &gt; <span class="number">2</span> * <span class="number">60</span> * <span class="number">1000</span>) &#123;</span><br><span class="line">                    rabbitMqSender.send(<span class="string">"approval.create"</span>, failureMqRecord);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//释放🔒</span></span><br><span class="line">                redisDistributedLock.releaseLock(failureMqRecord.getUuid());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>聪明的小伙伴看到这里，会发现任务线程里还用到了分布式🔒。为啥还要加分布式锁，因为是分布式架构啊，会有多个相同定时器从db里取记录处理，如果不加分布式锁，那真的要乱套了。因为redis用的多，就用redis来实现分布式锁了，zookeeper啥的，有空再研究了。redis分布式锁的代码实现，网上有很多资源，我这里就不贴了，嘿嘿</p><p>好了，到这里rabbitmq的去重以及防丢失方案已经实现了，如果你有更好的解决方案或者指出我方案的不足，欢迎留言讨论😁</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="后端笔记" scheme="https://fatboa.co/categories/%E5%90%8E%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="rabbitmq" scheme="https://fatboa.co/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>记录一次微服务异步化实现过程</title>
    <link href="https://fatboa.co/2019/03/21/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%82%E6%AD%A5%E5%8C%96%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B/"/>
    <id>https://fatboa.co/2019/03/21/记录一次微服务异步化实现过程/</id>
    <published>2019-03-21T03:54:04.000Z</published>
    <updated>2019-05-10T10:53:39.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>-<br>    <div id="aplayer-pmyfCooL" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="false" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><br>-</p><blockquote><p>个人笔记，如有描述不当，欢迎留言指出~</p></blockquote><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>公司使用springcloud开发微服务，我在开发审批模块中，其中一个新增审批请求中请求了其他几个模块，使用feign接口依次请求，最后发现请求平均耗时1.5s。这速度怎么能忍，于是进行了异步化改造。</p><h3 id="异步化"><a href="#异步化" class="headerlink" title="异步化"></a>异步化</h3><h4 id="同步版关键代码"><a href="#同步版关键代码" class="headerlink" title="同步版关键代码"></a>同步版关键代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">"rpc请求开始"</span>);</span><br><span class="line">   <span class="keyword">long</span> rpcstart = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">   StoreStaffDTO staffDTO = staffClient.getStaffDTO(userDTO.getUuid()); <span class="comment">//获取门店员工信息</span></span><br><span class="line">   SupplierDTO supplierDTO = supplierClient.getSupplierDTO(userDTO.getSupplierCode()); <span class="comment">//获取供应商信息</span></span><br><span class="line">   StoreDTO staffStoreDTO = storeClient.getStoreDTO(userDTO.getStoreUuid()); <span class="comment">//获取员工所在门店信息</span></span><br><span class="line">   CustomerInfoDTO customerInfoDTO = customerInfoClient.getCustomerInfo(approval.getCustomerUuid()); <span class="comment">//获取顾客信息</span></span><br><span class="line">   StoreDTO inStoreDto = ObjectUtils.isEmpty(approval.getInStoreUuid()) ? <span class="keyword">null</span> : storeClient.getStoreDTO(approval.getInStoreUuid());<span class="comment">//获取客户转入门店信息</span></span><br><span class="line">   ServerDto serverDto = ObjectUtils.isEmpty(approval.getServerUuid()) ? <span class="keyword">null</span> : serveClient.getServeSpecTypeByuuid(approval.getServerUuid()); <span class="comment">//获取服务信息</span></span><br><span class="line">   CustAccountDto custAccountDto = ObjectUtils.isEmpty(approval.getCustCardUuid()) ? <span class="keyword">null</span> : accountClient.getCustAccount(approval.getCustCardUuid()); <span class="comment">//获取顾客账户信息</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">long</span> rpcend = System.currentTimeMillis();</span><br><span class="line">   logger.info(<span class="string">"rpc请求结束，耗时：&#123;&#125;毫秒"</span>, (rpcend - rpcstart));</span><br></pre></td></tr></table></figure><p><strong>console</strong><br><img src="https://fatboa.gz.bcebos.com/img/posts/记录一次微服务异步化实现过程/1553153857517.png?authorization=bce-auth-v1/b6f23434344c421e8a830ea644d98122/2019-03-26T03:57:06Z/-1/host/41d5f227ada8e36cc0eeeaf638a80d310ae829334440a226c3fb4f6f5bcdc366" alt="Alt text"><br><img src="https://fatboa.gz.bcebos.com/img/posts/记录一次微服务异步化实现过程/1553154057031.png?authorization=bce-auth-v1/b6f23434344c421e8a830ea644d98122/2019-03-26T03:57:24Z/-1/host/2a567892d733a9f7b968c6a8d2d5fb0de69b33e09eba3c59296f61a45127fa43" alt="Alt text"><br><img src="https://fatboa.gz.bcebos.com/img/posts/记录一次微服务异步化实现过程/1553154079001.png?authorization=bce-auth-v1/b6f23434344c421e8a830ea644d98122/2019-03-26T03:57:41Z/-1/host/703dffc7bc38617a2a83970973165b6f681054887856ec9af454e82109040de2" alt="Alt text"></p><p>从打印日志中可以看出，由于网络波动性，请求耗时可能只要1秒也可能将近4秒，但rpc请求总是会占总耗时的90%左右，所以影响新增审批的请求的瓶颈就是这些rpc请求，下面我使用异步线程发送这些rpc请求。</p><h4 id="异步版关键代码"><a href="#异步版关键代码" class="headerlink" title="异步版关键代码"></a>异步版关键代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">"rpc请求开始"</span>);</span><br><span class="line">   <span class="keyword">long</span> rpcstart = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">   Approval approvalFina = approval;</span><br><span class="line">   CompletableFuture&lt;StoreDTO&gt; storeDTOCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           logger.info(<span class="string">"当前线程名：&#123;&#125;"</span>, Thread.currentThread().getName());</span><br><span class="line">           <span class="keyword">return</span> storeClient.getStoreDTO(userDTO.getStoreUuid());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(<span class="string">"获取门店信息rpc错误，原因："</span>, e);</span><br><span class="line">           <span class="keyword">throw</span> e;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   CompletableFuture&lt;StoreDTO&gt; inStoreDTOCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           logger.info(<span class="string">"当前线程名：&#123;&#125;"</span>, Thread.currentThread().getName());</span><br><span class="line">           <span class="keyword">if</span> (!ObjectUtils.isEmpty(approvalFina.getInStoreUuid())) &#123;</span><br><span class="line">               <span class="keyword">return</span> storeClient.getStoreDTO(approvalFina.getInStoreUuid());</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(<span class="string">"获取转入门店信息rpc错误，原因：&#123;&#125;"</span>, e);</span><br><span class="line">           <span class="keyword">throw</span> e;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   CompletableFuture&lt;SupplierDTO&gt; supplierDTOCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           logger.info(<span class="string">"当前线程名：&#123;&#125;"</span>, Thread.currentThread().getName());</span><br><span class="line">           <span class="keyword">return</span> supplierClient.getSupplierDTO(userDTO.getSupplierCode());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(<span class="string">"获取供应商信息rpc错误，原因：&#123;&#125;"</span>, e);</span><br><span class="line">           <span class="keyword">throw</span> e;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   CompletableFuture&lt;StoreStaffDTO&gt; staffDTOCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           logger.info(<span class="string">"当前线程名：&#123;&#125;"</span>, Thread.currentThread().getName());</span><br><span class="line">           <span class="keyword">return</span> staffClient.getStaffDTO(userDTO.getUuid());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(<span class="string">"获取门店员工信息rpc错误，原因：&#123;&#125;"</span>, e);</span><br><span class="line">           <span class="keyword">throw</span> e;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   CompletableFuture&lt;CustomerInfoDTO&gt; customerInfoDTOCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           logger.info(<span class="string">"当前线程名：&#123;&#125;"</span>, Thread.currentThread().getName());</span><br><span class="line">           <span class="keyword">return</span> customerInfoClient.getCustomerInfo(approvalFina.getCustomerUuid());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(<span class="string">"获取顾客信息rpc错误，原因：&#123;&#125;"</span>, e);</span><br><span class="line">           <span class="keyword">throw</span> e;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   CompletableFuture&lt;ServerDto&gt; serverDtoCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           logger.info(<span class="string">"当前线程名：&#123;&#125;"</span>, Thread.currentThread().getName());</span><br><span class="line">           <span class="keyword">if</span> (!ObjectUtils.isEmpty(approvalFina.getServerUuid())) &#123;</span><br><span class="line">               <span class="keyword">return</span> serveClient.getServeSpecTypeByuuid(approvalFina.getServerUuid());</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(<span class="string">"获取服务信息rpc错误，原因：&#123;&#125;"</span>, e);</span><br><span class="line">           <span class="keyword">throw</span> e;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   CompletableFuture&lt;CustAccountDto&gt; custAccountDtoCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           logger.info(<span class="string">"当前线程名：&#123;&#125;"</span>, Thread.currentThread().getName());</span><br><span class="line">           <span class="keyword">if</span> (!ObjectUtils.isEmpty(approvalFina.getCustCardUuid())) &#123;</span><br><span class="line">               <span class="keyword">return</span> accountClient.getCustAccount(approvalFina.getCustCardUuid());</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(<span class="string">"获取顾客账户信息rpc错误，原因：&#123;&#125;"</span>, e);</span><br><span class="line">           <span class="keyword">throw</span> e;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   CompletableFuture.allOf(storeDTOCompletableFuture, inStoreDTOCompletableFuture, serverDtoCompletableFuture,</span><br><span class="line">           supplierDTOCompletableFuture, staffDTOCompletableFuture, customerInfoDTOCompletableFuture, custAccountDtoCompletableFuture);</span><br><span class="line"></span><br><span class="line">   StoreStaffDTO staffDTO = <span class="keyword">null</span>;<span class="comment">//员工信息</span></span><br><span class="line">   SupplierDTO supplierDTO = <span class="keyword">null</span>; <span class="comment">//供应商信息</span></span><br><span class="line">   StoreDTO staffStoreDTO = <span class="keyword">null</span>;<span class="comment">//员工所在门店信息</span></span><br><span class="line">   CustomerInfoDTO customerInfoDTO = <span class="keyword">null</span>; <span class="comment">//顾客信息</span></span><br><span class="line">   StoreDTO inStoreDto = <span class="keyword">null</span>;<span class="comment">//顾客转入门店信息</span></span><br><span class="line">   ServerDto serverDto = <span class="keyword">null</span>; <span class="comment">//服务信息</span></span><br><span class="line">   CustAccountDto custAccountDto = <span class="keyword">null</span>; <span class="comment">//顾客账户信息</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       staffStoreDTO = storeDTOCompletableFuture.get();</span><br><span class="line">       inStoreDto = inStoreDTOCompletableFuture.get();</span><br><span class="line">       staffDTO = staffDTOCompletableFuture.get();</span><br><span class="line">       supplierDTO = supplierDTOCompletableFuture.get();</span><br><span class="line">       customerInfoDTO = customerInfoDTOCompletableFuture.get();</span><br><span class="line">       serverDto = serverDtoCompletableFuture.get();</span><br><span class="line">       custAccountDto = custAccountDtoCompletableFuture.get();</span><br><span class="line">   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">       logger.error(<span class="string">"线程中断错误信息：&#123;&#125;"</span>, e);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">       logger.error(<span class="string">"线程执行错误信息：&#123;&#125;"</span>, e);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">long</span> rpcend = System.currentTimeMillis();</span><br><span class="line">   logger.info(<span class="string">"rpc请求结束，耗时：&#123;&#125;毫秒"</span>, (rpcend - rpcstart));</span><br></pre></td></tr></table></figure><p><strong>console</strong><br><img src="https://fatboa.gz.bcebos.com/img/posts/记录一次微服务异步化实现过程/1553159279545.png?authorization=bce-auth-v1/b6f23434344c421e8a830ea644d98122/2019-03-26T03:58:16Z/-1/host/3fd0a1fd20bf7445edd15473062b843c432e814b87f82fc5927f9151cd9e4027" alt="Alt text"></p><h3 id="exception分析"><a href="#exception分析" class="headerlink" title="exception分析"></a>exception分析</h3><p>what😨!竟然报未授权登录异常，不可能，feign请求里应该是带了请求头阿，下面拓展一些知识。</p><h4 id="知识拓展"><a href="#知识拓展" class="headerlink" title="知识拓展"></a>知识拓展</h4><h5 id="completableFuture"><a href="#completableFuture" class="headerlink" title="completableFuture"></a><code>completableFuture</code></h5><p>completableFuture扩展了Future的功能，并且实现了线程间同步的功能，我们用它提供的语法，可以很简单的实现异步编程。</p><h5 id="oauth2"><a href="#oauth2" class="headerlink" title="oauth2"></a><code>oauth2</code></h5><p>框架里引用了spring security以及oauth2来实现授权认证服务,所以客户请求是要带上Authorization请求头的。</p><h5 id="feign"><a href="#feign" class="headerlink" title="feign"></a><code>feign</code></h5><p>feign的本质，其实就是使用httpclient帮我们封装好了http请求。所以调用feign接口的方法就是发起一次http请求而已。如果不做处理的，那么feign发送的http请求里是没有Authorization请求头的。</p><h5 id="RequestInterceptor"><a href="#RequestInterceptor" class="headerlink" title="RequestInterceptor"></a><code>RequestInterceptor</code></h5><p>RequestInterceptor是feign提供的一个拦截器<br>放出我的配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignOauth2RequestInterceptor</span> <span class="keyword">implements</span> <span class="title">RequestInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String AUTHORIZATION_HEADER = <span class="string">"Authorization"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String BEARER_TOKEN_TYPE = <span class="string">"Bearer"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(RequestTemplate requestTemplate)</span> </span>&#123;</span><br><span class="line">        SecurityContext securityContext = SecurityContextHolder.getContext();</span><br><span class="line">        Authentication authentication = securityContext.getAuthentication();</span><br><span class="line">        <span class="keyword">if</span> (authentication != <span class="keyword">null</span> &amp;&amp; authentication.getDetails() <span class="keyword">instanceof</span> OAuth2AuthenticationDetails) &#123;</span><br><span class="line">            OAuth2AuthenticationDetails details = (OAuth2AuthenticationDetails) authentication.getDetails();</span><br><span class="line">            requestTemplate.header(AUTHORIZATION_HEADER, String.format(<span class="string">"%s %s"</span>, BEARER_TOKEN_TYPE, details.getTokenValue()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>拦截器的作用就是从securityContext拿到当前请求用户的认证信息<code>authentication</code>，然后为feign的请求模板·requestTemplate·赋上Authorization请求头。</p><h4 id="断点跟踪"><a href="#断点跟踪" class="headerlink" title="断点跟踪"></a>断点跟踪</h4><h5 id="断点1"><a href="#断点1" class="headerlink" title="断点1"></a>断点1</h5><p>打个断点跟进，看看拦截后feign执行了哪些操作，关键位置如下图：<br><img src="https://fatboa.gz.bcebos.com/img/posts/记录一次微服务异步化实现过程/1553161694621.png?authorization=bce-auth-v1/b6f23434344c421e8a830ea644d98122/2019-03-26T03:58:52Z/-1/host/4e4c84bcb0769fc2ea5b14ad22eaab28f732cde8f9c9540ef0a3f83c409db4bc" alt="Alt text"><br>可以看到feign将requestTemplate封装成request对象，并最终被client执行得到response,里面详细细节就不深入。从这里我们可以知道，调用feign发送的请求是携带Authorization请求头的,这样模块间发起请求就不会报未授权错误了。<br><img src="https://fatboa.gz.bcebos.com/img/posts/记录一次微服务异步化实现过程/1553163090378.png?authorization=bce-auth-v1/b6f23434344c421e8a830ea644d98122/2019-03-26T04:00:52Z/-1/host/74c57cc67e7b66b230dd6f2f5b7694fd625b950e78bbd3148b67581c329d5f23" alt="@完整的请求流程"></p><h5 id="断点2"><a href="#断点2" class="headerlink" title="断点2"></a>断点2</h5><p>所以按道理是不应该报用户未登录授权异常的，所以我们在拦截器打个端点,看看requestTemplate到底有没有被赋上请求头。<br><img src="https://fatboa.gz.bcebos.com/img/posts/记录一次微服务异步化实现过程/1553162679507.png?authorization=bce-auth-v1/b6f23434344c421e8a830ea644d98122/2019-03-26T04:01:48Z/-1/host/0e9df184af7c614d0c929894c0f8df4b1349a4dc2f8f76951695ae689358e25d" alt="Alt text"><br>what😮!这不是推翻了我的认知吗,眼神逐渐呆滞😑<br>开个玩笑，authentication从securityContext里获取，securityContext从SecurityContextHolder静态方法中获取<br><img src="https://fatboa.gz.bcebos.com/img/posts/记录一次微服务异步化实现过程/1553164715685.png?authorization=bce-auth-v1/b6f23434344c421e8a830ea644d98122/2019-03-26T04:04:10Z/-1/host/8a9baad188acf379ac91104bd8b451e48a7727d8d2b95f92faefff7085f2a9aa" alt="@SecurityContextHolder"></p><p>从图中可以看出securityContext是从strategy里拿到的。<br><code>SecurityContextHolderStrategy</code>是spring security安全上下文的存取策略。<code>SecurityContextHolderStrategy</code>接口有三个实现类，对应三种实现策略：</p><ul><li><code>GlobalSecurityContextHolderStrategy</code>：使用 一个静态变量存放securityContext</li><li><code>ThreadLocalSecurityContextHolderStrategy</code>：使用ThreadLocal存放securityContext</li><li><code>InheritableThreadLocalSecurityContextHolderStrategy</code>：使用InheritableThreadLocal存放securityContext<h5 id="断点3"><a href="#断点3" class="headerlink" title="断点3"></a>断点3</h5>那我当前环境里SecurityContextHolder里使用的是哪个策略呢，打个断点<br><img src="https://fatboa.gz.bcebos.com/img/posts/记录一次微服务异步化实现过程/1553165859935.png?authorization=bce-auth-v1/b6f23434344c421e8a830ea644d98122/2019-03-26T04:04:36Z/-1/host/053df5583c25dec78e22a826519133116ff45ea4a444ad019cd4584ae200e57d" alt="@SecurityContextHolder"></li></ul><p>恍然大悟！🤣原来采用的是<code>ThreadLocalSecurityContextHolderStrategy</code><br>还记得我异步改造里怎么写的吗<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;StoreDTO&gt; storeDTOCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             logger.info(<span class="string">"当前线程名：&#123;&#125;"</span>, Thread.currentThread().getName());</span><br><span class="line">             <span class="keyword">return</span> storeClient.getStoreDTO(userDTO.getStoreUuid());</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             logger.error(<span class="string">"获取门店信息rpc错误，原因："</span>, e);</span><br><span class="line">             <span class="keyword">throw</span> e;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure></p><p>我将调用feign请求代码写在<code>CompletableFuture.supplyAsync(()-&gt;{})</code>中,而CompletableFuture里默认线程池会分配新线程去执行任务，所以新线程里是没有securityContext的线程副本的！所以在拦截器里才会取到空的securityContext，最终报未授权登录异常！bingo😎</p><h4 id="最终异步版关键代码"><a href="#最终异步版关键代码" class="headerlink" title="最终异步版关键代码"></a>最终异步版关键代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">"rpc请求开始"</span>);</span><br><span class="line">   <span class="keyword">long</span> rpcstart = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">   SecurityContext securityContext = SecurityContextHolder.getContext();<span class="comment">//从当前请求线程中拿到securityContext安全上下文</span></span><br><span class="line">   Approval approvalFina = approval;</span><br><span class="line">   CompletableFuture&lt;StoreDTO&gt; storeDTOCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           logger.info(<span class="string">"当前线程名：&#123;&#125;"</span>, Thread.currentThread().getName());</span><br><span class="line">           SecurityContextHolder.setContext(securityContext); <span class="comment">//设置securityContext安全上下文线程副本</span></span><br><span class="line">           <span class="keyword">return</span> storeClient.getStoreDTO(userDTO.getStoreUuid());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(<span class="string">"获取门店信息rpc错误，原因："</span>, e);</span><br><span class="line">           <span class="keyword">throw</span> e;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   CompletableFuture&lt;StoreDTO&gt; inStoreDTOCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           logger.info(<span class="string">"当前线程名：&#123;&#125;"</span>, Thread.currentThread().getName());</span><br><span class="line">           <span class="keyword">if</span> (!ObjectUtils.isEmpty(approvalFina.getInStoreUuid())) &#123;</span><br><span class="line">               SecurityContextHolder.setContext(securityContext);</span><br><span class="line">               <span class="keyword">return</span> storeClient.getStoreDTO(approvalFina.getInStoreUuid());</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(<span class="string">"获取转入门店信息rpc错误，原因：&#123;&#125;"</span>, e);</span><br><span class="line">           <span class="keyword">throw</span> e;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   CompletableFuture&lt;SupplierDTO&gt; supplierDTOCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           logger.info(<span class="string">"当前线程名：&#123;&#125;"</span>, Thread.currentThread().getName());</span><br><span class="line">           SecurityContextHolder.setContext(securityContext);</span><br><span class="line">           <span class="keyword">return</span> supplierClient.getSupplierDTO(userDTO.getSupplierCode());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(<span class="string">"获取供应商信息rpc错误，原因：&#123;&#125;"</span>, e);</span><br><span class="line">           <span class="keyword">throw</span> e;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   CompletableFuture&lt;StoreStaffDTO&gt; staffDTOCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           logger.info(<span class="string">"当前线程名：&#123;&#125;"</span>, Thread.currentThread().getName());</span><br><span class="line">           SecurityContextHolder.setContext(securityContext);</span><br><span class="line">           <span class="keyword">return</span> staffClient.getStaffDTO(userDTO.getUuid());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(<span class="string">"获取门店员工信息rpc错误，原因：&#123;&#125;"</span>, e);</span><br><span class="line">           <span class="keyword">throw</span> e;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   CompletableFuture&lt;CustomerInfoDTO&gt; customerInfoDTOCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           logger.info(<span class="string">"当前线程名：&#123;&#125;"</span>, Thread.currentThread().getName());</span><br><span class="line">           SecurityContextHolder.setContext(securityContext);</span><br><span class="line">           <span class="keyword">return</span> customerInfoClient.getCustomerInfo(approvalFina.getCustomerUuid());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(<span class="string">"获取顾客信息rpc错误，原因：&#123;&#125;"</span>, e);</span><br><span class="line">           <span class="keyword">throw</span> e;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   CompletableFuture&lt;ServerDto&gt; serverDtoCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           logger.info(<span class="string">"当前线程名：&#123;&#125;"</span>, Thread.currentThread().getName());</span><br><span class="line">           <span class="keyword">if</span> (!ObjectUtils.isEmpty(approvalFina.getServerUuid())) &#123;</span><br><span class="line">               SecurityContextHolder.setContext(securityContext);</span><br><span class="line">               <span class="keyword">return</span> serveClient.getServeSpecTypeByuuid(approvalFina.getServerUuid());</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(<span class="string">"获取服务信息rpc错误，原因：&#123;&#125;"</span>, e);</span><br><span class="line">           <span class="keyword">throw</span> e;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   CompletableFuture&lt;CustAccountDto&gt; custAccountDtoCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           logger.info(<span class="string">"当前线程名：&#123;&#125;"</span>, Thread.currentThread().getName());</span><br><span class="line">           <span class="keyword">if</span> (!ObjectUtils.isEmpty(approvalFina.getCustCardUuid())) &#123;</span><br><span class="line">               SecurityContextHolder.setContext(securityContext);</span><br><span class="line">               <span class="keyword">return</span> accountClient.getCustAccount(approvalFina.getCustCardUuid());</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(<span class="string">"获取顾客账户信息rpc错误，原因：&#123;&#125;"</span>, e);</span><br><span class="line">           <span class="keyword">throw</span> e;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   CompletableFuture.allOf(storeDTOCompletableFuture, inStoreDTOCompletableFuture, serverDtoCompletableFuture,</span><br><span class="line">           supplierDTOCompletableFuture, staffDTOCompletableFuture, customerInfoDTOCompletableFuture, custAccountDtoCompletableFuture);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   StoreStaffDTO staffDTO = <span class="keyword">null</span>;<span class="comment">//员工信息</span></span><br><span class="line">   SupplierDTO supplierDTO = <span class="keyword">null</span>; <span class="comment">//供应商信息</span></span><br><span class="line">   StoreDTO staffStoreDTO = <span class="keyword">null</span>;<span class="comment">//员工所在门店信息</span></span><br><span class="line">   CustomerInfoDTO customerInfoDTO = <span class="keyword">null</span>; <span class="comment">//顾客信息</span></span><br><span class="line">   StoreDTO inStoreDto = <span class="keyword">null</span>;<span class="comment">//顾客转入门店信息</span></span><br><span class="line">   ServerDto serverDto = <span class="keyword">null</span>; <span class="comment">//服务信息</span></span><br><span class="line">   CustAccountDto custAccountDto = <span class="keyword">null</span>; <span class="comment">//顾客账户信息</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       staffStoreDTO = storeDTOCompletableFuture.get();</span><br><span class="line">       inStoreDto = inStoreDTOCompletableFuture.get();</span><br><span class="line">       staffDTO = staffDTOCompletableFuture.get();</span><br><span class="line">       supplierDTO = supplierDTOCompletableFuture.get();</span><br><span class="line">       customerInfoDTO = customerInfoDTOCompletableFuture.get();</span><br><span class="line">       serverDto = serverDtoCompletableFuture.get();</span><br><span class="line">       custAccountDto = custAccountDtoCompletableFuture.get();</span><br><span class="line">   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">       logger.error(<span class="string">"线程中断错误信息：&#123;&#125;"</span>, e);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">       logger.error(<span class="string">"线程执行错误信息：&#123;&#125;"</span>, e);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">long</span> rpcend = System.currentTimeMillis();</span><br><span class="line">   logger.info(<span class="string">"rpc请求结束，耗时：&#123;&#125;毫秒"</span>, (rpcend - rpcstart));</span><br></pre></td></tr></table></figure><p> <strong>console</strong><br><img src="https://fatboa.gz.bcebos.com/img/posts/记录一次微服务异步化实现过程/1553167339318.png?authorization=bce-auth-v1/b6f23434344c421e8a830ea644d98122/2019-03-26T04:05:05Z/-1/host/15728cd5504060e68cf7aad40b215cdd3ca4715533f23e137a7fa738a5549a4c" alt="Alt text"><br><img src="https://fatboa.gz.bcebos.com/img/posts/记录一次微服务异步化实现过程/1553167369145.png?authorization=bce-auth-v1/b6f23434344c421e8a830ea644d98122/2019-03-26T04:05:19Z/-1/host/b8993fb04397161da8438ec863c18f13c52077c9d7aa662b5d15016336734954" alt="Alt text"></p><p>可以看到rpc请求的耗时被平均缩短到500毫秒内😁</p><blockquote><p><code>CompletableFuture</code>学习可以看这篇👉<a href="https://www.cnblogs.com/cjsblog/p/9267163.html" target="_blank" rel="noopener">here</a>,我觉得这位博主写的还行。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="后端笔记" scheme="https://fatboa.co/categories/%E5%90%8E%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="微服务" scheme="https://fatboa.co/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>安装rabbitmq碰到的一些错误</title>
    <link href="https://fatboa.co/2018/08/25/%E5%AE%89%E8%A3%85rabbitmq%E7%A2%B0%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%94%99%E8%AF%AF/"/>
    <id>https://fatboa.co/2018/08/25/安装rabbitmq碰到的一些错误/</id>
    <published>2018-08-25T07:25:44.000Z</published>
    <updated>2019-05-10T10:53:39.743Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>    <div id="aplayer-iBCpxirP" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><hr><blockquote><p>个人笔记，如有描述不当，欢迎留言指出~</p></blockquote><p>安装请看我的这篇<a href="https://cloudintheking.github.io/2018/09/07/windows下安装rabbitmq/" target="_blank" rel="noopener">windows下安装rabbitmq</a></p><h2 id="the-first-and-the-last"><a href="#the-first-and-the-last" class="headerlink" title="the first and the last!!!"></a>the first and the last!!!</h2><p>你觉得rabbitmq服务启动没报错就大功告成了？no，you’re so naive<br>我尝试run <code>rabbitmq-plugin enable rabbitmq_management</code>来开启管理插件，但是并不能打开管理页面，而且<code>rabbitmqctl</code>的相关命令也都报错。为此我翻遍了国内大大小小的论坛博客，解决方案是五花八门，但仍不能完全解决我的问题，所以我开始怀疑人生。<br>当我一筹莫展时，我留意到其中一个错误<br>run <code>rabbitmqctl status</code>时,错误提示是这样的：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Starting node rabbit@DESKTOP-<span class="number">0</span>S1RKNE ... ** (ArgumentError) <span class="keyword">argument</span> error (stdlib) io_lib.er<span class="variable">l:170</span>: :io_lib.format(<span class="string">' * effective user\'s home directory: ~s~n'</span>, [[<span class="number">67</span>, <span class="number">58</span>, <span class="number">92</span>, <span class="number">85</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">92</span>, <span class="number">19975</span>, <span class="number">23480</span>, <span class="number">26827</span>]]) src/rabbit_misc.er<span class="variable">l:670</span>: :rabbit_misc.<span class="string">"-format_many/1-lc$^0/1-0-"</span>/<span class="number">1</span> src/rabbit_misc.er<span class="variable">l:670</span>: :rabbit_misc.<span class="string">"-format_many/1-lc$^0/1-0-"</span>/<span class="number">1</span> src/rabbit_misc.er<span class="variable">l:670</span>: :rabbit_misc.format_many/<span class="number">1</span> (rabbitmqctl) lib/rabbitmqctl.<span class="keyword">ex</span>:<span class="number">349</span>: RabbitMQCtl.get_node_diagnostics/<span class="number">1</span> (rabbitmqctl) lib/rabbitmqctl.<span class="keyword">ex</span>:<span class="number">307</span>: RabbitMQCtl.format_error/<span class="number">3</span> (rabbitmqctl) lib/rabbitmqctl.<span class="keyword">ex</span>:<span class="number">43</span>: RabbitMQCtl.main/<span class="number">1</span> (elixir) lib/kernel/cli.<span class="keyword">ex</span>:<span class="number">76</span>: anonymous fn/<span class="number">3</span> in Kernel.CLI.exec_fun/<span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>看字面意思是我参数错误，我一开始没明白什么意思<br>直到我在<strong>stack overflow</strong> 上看到跟我同样的错误，不像国内论坛上尽说些有的没的，人老外就简单的这么一句<br><img src="http://fatboa.gz.bcebos.com/img/posts/rabbitmq%E9%94%99%E8%AF%AF/answer.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-09-08T01%3A48%3A01Z%2F-1%2Fhost%2F25681bfdd2bc8b8ced79892ef8274bdadda1d08bb9dd99c073219f0387e77e5e" alt="Alt text"></p><p><code>如果你的用户名不是英文，把它改成英文。</code></p><p>再回顾下错误提示，原来是路径参数错了。<br>唉，啥也不说了，悔不当初啊，就不该设置中文用户名！！</p><blockquote><p>如何修改用户名及用户文件夹名，我是参考这篇博文的<a href="https://blog.csdn.net/zhang_jinhe/article/details/40624847" target="_blank" rel="noopener">https://blog.csdn.net/zhang_jinhe/article/details/40624847</a><br>然后卸载rabbitmq重装，所有问题都解决了✌</p></blockquote><h2 id="feeling"><a href="#feeling" class="headerlink" title="feeling"></a>feeling</h2><p>我们往往认为错误多是因为错误因素多，但其实一个错误往往是由另一个错误引起的，它本身其实并不是错误因素。所以在解决问题的时候，不能盲目地企图去查找所有错误因素，而是应该花时间去找到那个关键因素，解决它，那剩下的错误就悉数解决了。moreover，英语能力也很重要哈😄</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="问题总结篇" scheme="https://fatboa.co/categories/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%E7%AF%87/"/>
    
    
      <category term="rabbitmq" scheme="https://fatboa.co/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>windows下安装rabbitmq</title>
    <link href="https://fatboa.co/2018/08/25/windows%E4%B8%8B%E5%AE%89%E8%A3%85rabbitmq/"/>
    <id>https://fatboa.co/2018/08/25/windows下安装rabbitmq/</id>
    <published>2018-08-25T06:32:17.000Z</published>
    <updated>2019-05-10T10:53:39.743Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>    <div id="aplayer-ikcMklKR" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><hr><blockquote><p>个人笔记，如有描述不当，欢迎留言指出~</p></blockquote><h2 id="erlang"><a href="#erlang" class="headerlink" title="erlang"></a>erlang</h2><blockquote><p>rabbitmq是基于erlang开发，安装rabbitmq前必须安装erlang环境</p></blockquote><ul><li>下载<a href="http://www.erlang.org/downloads/20.1" target="_blank" rel="noopener">erlang20.1</a>并安装</li><li>安装后切记配置环境变量，新建系统环境变量<code>ERLANG_HOME</code>,值为你erlang的安装路径(如<code>F:\Environment\erl9.1</code>),然后向系统环境变量<code>path</code>追加内容<code>%ERLANG_HOME%\bin</code></li></ul><h2 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p> 下载<a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v3.7.3" target="_blank" rel="noopener">rabbitmq3.7.3</a>并安装</p><blockquote><p>erlang和rabbitmq不同版本间搭配可能存在bug，但至少我装的erlang20.1和rabbitmq3.7.3是没问题的</p></blockquote><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>新建系统环境变量<code>RABBITMQ_SERVER</code>,值为你rabbitmq的安装路径(如<code>F:\Environment\RabbitMQ\rabbitmq_server-3.7.3</code>),然后向系统环境变量<code>path</code>追加内容<code>%RABBITMQ_SERVER%\sbin</code></p><h3 id="同步Erlang-Cookies"><a href="#同步Erlang-Cookies" class="headerlink" title="同步Erlang Cookies"></a>同步Erlang Cookies</h3><blockquote><p>这是最重要的一步，rabbitmq 的集群节点和命令行工具都是使用了erlang cookies来作为认证的</p></blockquote><p>这个cookie文件有两份，这两份<strong>cookie</strong>内容要<strong>保持一致</strong></p><ul><li>erlang20.2之前：<ul><li>一份在<code>C:\Users\%USERNAME%\.erlang.cookie</code></li><li>一份在<code>C:\Windows\.erlang.cookie</code></li></ul></li><li>erlang20.2之后：<ul><li>一份在<code>C:\Users\%USERNAME%\.erlang.cookie</code></li><li>一份在<code>C:\WINDOWS\system32\config\systemprofile\.erlang.cookie</code></li></ul></li></ul><h3 id="安装服务并运行"><a href="#安装服务并运行" class="headerlink" title="安装服务并运行"></a>安装服务并运行</h3><p>rabbitmq在安装时默认启动了服务，但这个服务可能会有问题，比如上面说的cookie要一致，如果不一致便启动了服务，那这个服务肯定是有问题的。</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切记管理员身份</span></span><br><span class="line">f: <span class="comment">#进入f盘</span></span><br><span class="line"><span class="built_in">cd</span>  F:\Environment\RabbitMQ\rabbitmq_server-3.7.3\sbin <span class="comment">#进入rabbitmq批处理目录</span></span><br><span class="line">rabbitmq-service stop <span class="comment">#停止rabbitmq服务</span></span><br><span class="line">rabbitmq-service remove <span class="comment">#删除rabbitmq服务</span></span><br><span class="line">rabbitmq-service install <span class="comment">#安装rabbitmq服务</span></span><br><span class="line">rabbitmq-service start <span class="comment">#启动rabbitmq服务</span></span><br></pre></td></tr></table></figure><p>如下图所示：<br> <img src="http://fatboa.gz.bcebos.com/img/posts/windows%E4%B8%8B%E5%AE%89%E8%A3%85rabbitmq/o1.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-09-08T01%3A48%3A50Z%2F-1%2Fhost%2F4fe8f9455386b171eae720058cb4469aa8f83e868b837d2cb73829fda674abc5" alt="Alt text"></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl status <span class="comment">#查看rabbitmq服务器状态</span></span><br></pre></td></tr></table></figure><p>如下图所示：<br><img src="http://fatboa.gz.bcebos.com/img/posts/windows%E4%B8%8B%E5%AE%89%E8%A3%85rabbitmq/o2.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-09-08T01%3A49%3A33Z%2F-1%2Fhost%2F09d4cba0979734d0d73f1d075861bc04cc9d78daf4b68b8eac9fad80f4090395" alt="Alt text"></p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management #开启rabbitmq管理插件</span><br></pre></td></tr></table></figure><p>如果你之前已经开启了插件，那么不会有变化，如下图所示：<br><img src="http://fatboa.gz.bcebos.com/img/posts/windows%E4%B8%8B%E5%AE%89%E8%A3%85rabbitmq/o3.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-09-08T01%3A49%3A55Z%2F-1%2Fhost%2F566cf3e2d8d7f6633c244f7d6d5b21c99d8a2e20b80905d2d2b18981631d15fa" alt="Alt text"></p><p>如果你之前没有开启插件，如下图所示：<br><img src="http://fatboa.gz.bcebos.com/img/posts/windows%E4%B8%8B%E5%AE%89%E8%A3%85rabbitmq/o4.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-09-08T01%3A50%3A24Z%2F-1%2Fhost%2Fa83d98ccbd8a5ca14eac823489e3436e7da466099b5d2927e813f1ecd9b77655" alt="Alt text"></p><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-service stop #停止rabbitmq服务</span><br><span class="line">rabbitmq-service start #启动rabbitmq服务使配置生效</span><br></pre></td></tr></table></figure><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>在浏览器地址栏中输入<a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a>，打开rabbitmq管理登录页面，默认用户名：<strong>guest</strong>，密码：<strong>guest</strong><br><img src="http://fatboa.gz.bcebos.com/img/posts/windows%E4%B8%8B%E5%AE%89%E8%A3%85rabbitmq/manage1.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-09-08T01%3A52%3A57Z%2F-1%2Fhost%2F963352106961bb399b07bec3244b6a5da52b31613190c8bf128237b83baa2c46" alt="Alt text"><br><img src="http://fatboa.gz.bcebos.com/img/posts/windows%E4%B8%8B%E5%AE%89%E8%A3%85rabbitmq/manage2.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-09-08T01%3A53%3A38Z%2F-1%2Fhost%2F41d34605633f388fc7a3ff73455ba67883f36515cc9f63f1d9c4bb071cc5e197" alt="Alt text"></p><blockquote><p>更多rabbitmq的详细安装介绍，see <a href="https://www.rabbitmq.com/install-windows-manual.html" target="_blank" rel="noopener">manual</a>，以后有空我会翻译下这篇文章(<em>^_^</em>)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="环境安装篇" scheme="https://fatboa.co/categories/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E7%AF%87/"/>
    
    
      <category term="rabbitmq" scheme="https://fatboa.co/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>AVL树之c++实现</title>
    <link href="https://fatboa.co/2018/08/18/AVL%E6%A0%91%E4%B9%8Bc-%E5%AE%9E%E7%8E%B0/"/>
    <id>https://fatboa.co/2018/08/18/AVL树之c-实现/</id>
    <published>2018-08-18T11:01:11.000Z</published>
    <updated>2019-05-10T10:53:39.742Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>    <div id="aplayer-UgsERhbp" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><hr><blockquote><p>个人笔记，如有描述不当，欢迎留言指出~</p></blockquote><h2 id="头文件AVLTree-h"><a href="#头文件AVLTree-h" class="headerlink" title="头文件AVLTree.h"></a>头文件<code>AVLTree.h</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _AVL_TREE_HPP_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _AVL_TREE_HPP_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">AVLTreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        T key;                <span class="comment">// 关键字(键值)</span></span><br><span class="line">        <span class="keyword">int</span> height;           <span class="comment">// 高度</span></span><br><span class="line">        AVLTreeNode *left;    <span class="comment">// 左孩子</span></span><br><span class="line">        AVLTreeNode *right;   <span class="comment">// 右孩子</span></span><br><span class="line"></span><br><span class="line">        AVLTreeNode(T value, AVLTreeNode *l, AVLTreeNode *r):</span><br><span class="line">key(value), height(<span class="number">0</span>),left(l),right(r)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">AVLTree</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        AVLTreeNode&lt;T&gt; *mRoot;    <span class="comment">// 根结点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        AVLTree();</span><br><span class="line">        ~AVLTree();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取树的高度</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">// 获取树的高度</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 前序遍历"AVL树"</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">// 中序遍历"AVL树"</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">// 后序遍历"AVL树"</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (递归实现)查找"AVL树"中键值为key的节点</span></span><br><span class="line">        AVLTreeNode&lt;T&gt;* search(T key);</span><br><span class="line">        <span class="comment">// (非递归实现)查找"AVL树"中键值为key的节点</span></span><br><span class="line">        AVLTreeNode&lt;T&gt;* iterativeSearch(T key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找最小结点：返回最小结点的键值。</span></span><br><span class="line">        <span class="function">T <span class="title">minimum</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">// 查找最大结点：返回最大结点的键值。</span></span><br><span class="line">        <span class="function">T <span class="title">maximum</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将结点(key为节点键值)插入到AVL树中</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(T key)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除结点(key为节点键值)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(T key)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 销毁AVL树</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印AVL树</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="comment">// 获取树的高度</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(AVLTreeNode&lt;T&gt;* tree)</span> </span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 前序遍历"AVL树"</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(AVLTreeNode&lt;T&gt;* tree)</span> <span class="keyword">const</span></span>;</span><br><span class="line">        <span class="comment">// 中序遍历"AVL树"</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(AVLTreeNode&lt;T&gt;* tree)</span> <span class="keyword">const</span></span>;</span><br><span class="line">        <span class="comment">// 后序遍历"AVL树"</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(AVLTreeNode&lt;T&gt;* tree)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (递归实现)查找"AVL树x"中键值为key的节点</span></span><br><span class="line">        AVLTreeNode&lt;T&gt;* search(AVLTreeNode&lt;T&gt;* x, T key) <span class="keyword">const</span>;</span><br><span class="line">        <span class="comment">// (非递归实现)查找"AVL树x"中键值为key的节点</span></span><br><span class="line">        AVLTreeNode&lt;T&gt;* iterativeSearch(AVLTreeNode&lt;T&gt;* x, T key) <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找最小结点：返回tree为根结点的AVL树的最小结点。</span></span><br><span class="line">        AVLTreeNode&lt;T&gt;* minimum(AVLTreeNode&lt;T&gt;* tree);</span><br><span class="line">        <span class="comment">// 查找最大结点：返回tree为根结点的AVL树的最大结点。</span></span><br><span class="line">        AVLTreeNode&lt;T&gt;* maximum(AVLTreeNode&lt;T&gt;* tree);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// LL：左左对应的情况(左单旋转)。</span></span><br><span class="line">        AVLTreeNode&lt;T&gt;* leftLeftRotation(AVLTreeNode&lt;T&gt;* k2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// RR：右右对应的情况(右单旋转)。</span></span><br><span class="line">        AVLTreeNode&lt;T&gt;* rightRightRotation(AVLTreeNode&lt;T&gt;* k1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// LR：左右对应的情况(左双旋转)。</span></span><br><span class="line">        AVLTreeNode&lt;T&gt;* leftRightRotation(AVLTreeNode&lt;T&gt;* k3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// RL：右左对应的情况(右双旋转)。</span></span><br><span class="line">        AVLTreeNode&lt;T&gt;* rightLeftRotation(AVLTreeNode&lt;T&gt;* k1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将结点(z)插入到AVL树(tree)中</span></span><br><span class="line">        AVLTreeNode&lt;T&gt;* insert(AVLTreeNode&lt;T&gt;* &amp;tree, T key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除AVL树(tree)中的结点(z)，并返回被删除的结点</span></span><br><span class="line">        AVLTreeNode&lt;T&gt;* remove(AVLTreeNode&lt;T&gt;* &amp;tree, AVLTreeNode&lt;T&gt;* z);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 销毁AVL树</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">(AVLTreeNode&lt;T&gt;* &amp;tree)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印AVL树</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(AVLTreeNode&lt;T&gt;* tree, T key, <span class="keyword">int</span> direction)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="源文件-AVLTree-cpp"><a href="#源文件-AVLTree-cpp" class="headerlink" title="源文件 AVLTree.cpp"></a>源文件 <code>AVLTree.cpp</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"AVLTree.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 构造函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">AVLTree</span>&lt;T&gt;:</span>:AVLTree():mRoot(<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 析构函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">AVLTree</span>&lt;T&gt;:</span>:~AVLTree() </span><br><span class="line">&#123;</span><br><span class="line">    destroy(mRoot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取树的高度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">AVLTree</span>&lt;T&gt;:</span>:height(AVLTreeNode&lt;T&gt;* tree) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> tree-&gt;height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">AVLTree</span>&lt;T&gt;:</span>:height() </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> height(mRoot);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 比较两个值的大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">AVLTree</span>&lt;T&gt;:</span>:max(<span class="keyword">int</span> a, <span class="keyword">int</span> b) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 前序遍历"AVL树"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">AVLTree</span>&lt;T&gt;:</span>:preOrder(AVLTreeNode&lt;T&gt;* tree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; tree-&gt;key &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">        preOrder(tree-&gt;left);</span><br><span class="line">        preOrder(tree-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">AVLTree</span>&lt;T&gt;:</span>:preOrder() </span><br><span class="line">&#123;</span><br><span class="line">    preOrder(mRoot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 中序遍历"AVL树"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">AVLTree</span>&lt;T&gt;:</span>:inOrder(AVLTreeNode&lt;T&gt;* tree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        inOrder(tree-&gt;left);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; tree-&gt;key &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">        inOrder(tree-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">AVLTree</span>&lt;T&gt;:</span>:inOrder() </span><br><span class="line">&#123;</span><br><span class="line">    inOrder(mRoot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 后序遍历"AVL树"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">AVLTree</span>&lt;T&gt;:</span>:postOrder(AVLTreeNode&lt;T&gt;* tree) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        postOrder(tree-&gt;left);</span><br><span class="line">        postOrder(tree-&gt;right);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; tree-&gt;key &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">AVLTree</span>&lt;T&gt;:</span>:postOrder() </span><br><span class="line">&#123;</span><br><span class="line">    postOrder(mRoot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (递归实现)查找"AVL树x"中键值为key的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">AVLTreeNode</span>&lt;T&gt;* <span class="title">AVLTree</span>&lt;T&gt;:</span>:search(AVLTreeNode&lt;T&gt;* x, T key) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (x==<span class="literal">NULL</span> || x-&gt;key==key)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (key &lt; x-&gt;key)</span><br><span class="line">        <span class="keyword">return</span> search(x-&gt;left, key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> search(x-&gt;right, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">AVLTreeNode</span>&lt;T&gt;* <span class="title">AVLTree</span>&lt;T&gt;:</span>:search(T key) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> search(mRoot, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (非递归实现)查找"AVL树x"中键值为key的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">AVLTreeNode</span>&lt;T&gt;* <span class="title">AVLTree</span>&lt;T&gt;:</span>:iterativeSearch(AVLTreeNode&lt;T&gt;* x, T key) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> ((x!=<span class="literal">NULL</span>) &amp;&amp; (x-&gt;key!=key))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; x-&gt;key)</span><br><span class="line">            x = x-&gt;left;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x = x-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">AVLTreeNode</span>&lt;T&gt;* <span class="title">AVLTree</span>&lt;T&gt;:</span>:iterativeSearch(T key)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> iterativeSearch(mRoot, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 查找最小结点：返回tree为根结点的AVL树的最小结点。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">AVLTreeNode</span>&lt;T&gt;* <span class="title">AVLTree</span>&lt;T&gt;:</span>:minimum(AVLTreeNode&lt;T&gt;* tree)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(tree-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        tree = tree-&gt;left;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">AVLTree</span>&lt;T&gt;:</span>:minimum()</span><br><span class="line">&#123;</span><br><span class="line">    AVLTreeNode&lt;T&gt; *p = minimum(mRoot);</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> p-&gt;key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (T)<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 查找最大结点：返回tree为根结点的AVL树的最大结点。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">AVLTreeNode</span>&lt;T&gt;* <span class="title">AVLTree</span>&lt;T&gt;:</span>:maximum(AVLTreeNode&lt;T&gt;* tree)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(tree-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        tree = tree-&gt;right;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">AVLTree</span>&lt;T&gt;:</span>:maximum()</span><br><span class="line">&#123;</span><br><span class="line">    AVLTreeNode&lt;T&gt; *p = maximum(mRoot);</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> p-&gt;key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (T)<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * LL：左左对应的情况(左单旋转)。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 返回值：旋转后的根节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">AVLTreeNode</span>&lt;T&gt;* <span class="title">AVLTree</span>&lt;T&gt;:</span>:leftLeftRotation(AVLTreeNode&lt;T&gt;* k2)</span><br><span class="line">&#123;</span><br><span class="line">   AVLTreeNode&lt;T&gt;* k1=k2-&gt;left;</span><br><span class="line">   k2-&gt;left=k1-&gt;right;</span><br><span class="line">   k1-&gt;right=k2;</span><br><span class="line">   k2-&gt;height=max(height(k2-&gt;left),height(k2-&gt;right))+<span class="number">1</span>;</span><br><span class="line">   k1-&gt;height=max(height(k1-&gt;left),height(k1-&gt;right))+<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">return</span> k1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * RR：右右对应的情况(右单旋转)。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 返回值：旋转后的根节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">AVLTreeNode</span>&lt;T&gt;* <span class="title">AVLTree</span>&lt;T&gt;:</span>:rightRightRotation(AVLTreeNode&lt;T&gt;* k1)</span><br><span class="line">&#123;</span><br><span class="line">  AVLTreeNode&lt;T&gt;* k2=k1-&gt;right;</span><br><span class="line">  k1-&gt;right=k2-&gt;left;</span><br><span class="line">  k2-&gt;left=k1;</span><br><span class="line"></span><br><span class="line">  k1-&gt;height=max(height(k1-&gt;left),height(k1-&gt;right))+<span class="number">1</span>;</span><br><span class="line">  k2-&gt;height=max(height(k2-&gt;left),height(k2-&gt;right))+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> k2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * LR：左右对应的情况(左双旋转)。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 返回值：旋转后的根节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">AVLTreeNode</span>&lt;T&gt;* <span class="title">AVLTree</span>&lt;T&gt;:</span>:leftRightRotation(AVLTreeNode&lt;T&gt;* k3)</span><br><span class="line">&#123;</span><br><span class="line">  k3-&gt;left=rightRightRotation(k3-&gt;left);</span><br><span class="line">  <span class="keyword">return</span> leftLeftRotation(k3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * RL：右左对应的情况(右双旋转)。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 返回值：旋转后的根节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">AVLTreeNode</span>&lt;T&gt;* <span class="title">AVLTree</span>&lt;T&gt;:</span>:rightLeftRotation(AVLTreeNode&lt;T&gt;* k1)</span><br><span class="line">&#123;</span><br><span class="line">    k1-&gt;right = leftLeftRotation(k1-&gt;right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rightRightRotation(k1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 将结点插入到AVL树中，并返回根节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     tree AVL树的根结点</span></span><br><span class="line"><span class="comment"> *     key 插入的结点的键值</span></span><br><span class="line"><span class="comment"> * 返回值：</span></span><br><span class="line"><span class="comment"> *     根节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">AVLTreeNode</span>&lt;T&gt;* <span class="title">AVLTree</span>&lt;T&gt;:</span>:insert(AVLTreeNode&lt;T&gt;* &amp;tree, T key)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 新建节点</span></span><br><span class="line">        tree = <span class="keyword">new</span> AVLTreeNode&lt;T&gt;(key, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (tree==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR: create avltree node failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; tree-&gt;key) <span class="comment">// 应该将key插入到"tree的左子树"的情况</span></span><br><span class="line">    &#123;</span><br><span class="line">        tree-&gt;left = insert(tree-&gt;left, key);</span><br><span class="line">        <span class="comment">// 插入节点后，若AVL树失去平衡，则进行相应的调节。</span></span><br><span class="line">        <span class="keyword">if</span> (height(tree-&gt;left) - height(tree-&gt;right) == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (key &lt; tree-&gt;left-&gt;key)</span><br><span class="line">                tree = leftLeftRotation(tree);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                tree = leftRightRotation(tree);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; tree-&gt;key) <span class="comment">// 应该将key插入到"tree的右子树"的情况</span></span><br><span class="line">    &#123;</span><br><span class="line">        tree-&gt;right = insert(tree-&gt;right, key);</span><br><span class="line">        <span class="comment">// 插入节点后，若AVL树失去平衡，则进行相应的调节。</span></span><br><span class="line">        <span class="keyword">if</span> (height(tree-&gt;right) - height(tree-&gt;left) == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (key &gt; tree-&gt;right-&gt;key)</span><br><span class="line">                tree = rightRightRotation(tree);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                tree = rightLeftRotation(tree);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//key == tree-&gt;key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"添加失败：不允许添加相同的节点！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tree-&gt;height = max( height(tree-&gt;left), height(tree-&gt;right)) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">AVLTree</span>&lt;T&gt;:</span>:insert(T key)</span><br><span class="line">&#123;</span><br><span class="line">    insert(mRoot, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 删除结点(z)，返回根节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     tree AVL树的根结点</span></span><br><span class="line"><span class="comment"> *     z 待删除的结点</span></span><br><span class="line"><span class="comment"> * 返回值：</span></span><br><span class="line"><span class="comment"> *     根节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">AVLTreeNode</span>&lt;T&gt;* <span class="title">AVLTree</span>&lt;T&gt;:</span>:remove(AVLTreeNode&lt;T&gt;* &amp;tree, AVLTreeNode&lt;T&gt;* z)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 根为空 或者 没有要删除的节点，直接返回NULL。</span></span><br><span class="line">    <span class="keyword">if</span> (tree==<span class="literal">NULL</span> || z==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (z-&gt;key &lt; tree-&gt;key)        <span class="comment">// 待删除的节点在"tree的左子树"中</span></span><br><span class="line">    &#123;</span><br><span class="line">        tree-&gt;left = remove(tree-&gt;left, z);</span><br><span class="line">        <span class="comment">// 删除节点后，若AVL树失去平衡，则进行相应的调节。</span></span><br><span class="line">        <span class="keyword">if</span> (height(tree-&gt;right) - height(tree-&gt;left) == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            AVLTreeNode&lt;T&gt; *r =  tree-&gt;right;</span><br><span class="line">            <span class="keyword">if</span> (height(r-&gt;left) &gt; height(r-&gt;right))</span><br><span class="line">                tree = rightLeftRotation(tree);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                tree = rightRightRotation(tree);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z-&gt;key &gt; tree-&gt;key)<span class="comment">// 待删除的节点在"tree的右子树"中</span></span><br><span class="line">    &#123;</span><br><span class="line">        tree-&gt;right = remove(tree-&gt;right, z);</span><br><span class="line">        <span class="comment">// 删除节点后，若AVL树失去平衡，则进行相应的调节。</span></span><br><span class="line">        <span class="keyword">if</span> (height(tree-&gt;left) - height(tree-&gt;right) == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            AVLTreeNode&lt;T&gt; *l =  tree-&gt;left;</span><br><span class="line">            <span class="keyword">if</span> (height(l-&gt;right) &gt; height(l-&gt;left))</span><br><span class="line">                tree = leftRightRotation(tree);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                tree = leftLeftRotation(tree);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">// tree是对应要删除的节点。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// tree的左右孩子都非空</span></span><br><span class="line">        <span class="keyword">if</span> ((tree-&gt;left!=<span class="literal">NULL</span>) &amp;&amp; (tree-&gt;right!=<span class="literal">NULL</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (height(tree-&gt;left) &gt; height(tree-&gt;right))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 如果tree的左子树比右子树高；</span></span><br><span class="line">                <span class="comment">// 则(01)找出tree的左子树中的最大节点</span></span><br><span class="line">                <span class="comment">//   (02)将该最大节点的值赋值给tree。</span></span><br><span class="line">                <span class="comment">//   (03)删除该最大节点。</span></span><br><span class="line">                <span class="comment">// 这类似于用"tree的左子树中最大节点"做"tree"的替身；</span></span><br><span class="line">                <span class="comment">// 采用这种方式的好处是：删除"tree的左子树中最大节点"之后，AVL树仍然是平衡的。</span></span><br><span class="line">                AVLTreeNode&lt;T&gt;* max = maximum(tree-&gt;left);</span><br><span class="line">                tree-&gt;key = max-&gt;key;</span><br><span class="line">                tree-&gt;left = remove(tree-&gt;left, max);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 如果tree的左子树不比右子树高(即它们相等，或右子树比左子树高1)</span></span><br><span class="line">                <span class="comment">// 则(01)找出tree的右子树中的最小节点</span></span><br><span class="line">                <span class="comment">//   (02)将该最小节点的值赋值给tree。</span></span><br><span class="line">                <span class="comment">//   (03)删除该最小节点。</span></span><br><span class="line">                <span class="comment">// 这类似于用"tree的右子树中最小节点"做"tree"的替身；</span></span><br><span class="line">                <span class="comment">// 采用这种方式的好处是：删除"tree的右子树中最小节点"之后，AVL树仍然是平衡的。</span></span><br><span class="line">                AVLTreeNode&lt;T&gt;* min = maximum(tree-&gt;right);</span><br><span class="line">                tree-&gt;key = min-&gt;key;</span><br><span class="line">                tree-&gt;right = remove(tree-&gt;right, min);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            AVLTreeNode&lt;T&gt;* tmp = tree;</span><br><span class="line">            tree = (tree-&gt;left!=<span class="literal">NULL</span>) ? tree-&gt;left : tree-&gt;right;</span><br><span class="line">            <span class="keyword">delete</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">AVLTree</span>&lt;T&gt;:</span>:remove(T key)</span><br><span class="line">&#123;</span><br><span class="line">    AVLTreeNode&lt;T&gt;* z; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((z = search(mRoot, key)) != <span class="literal">NULL</span>)</span><br><span class="line">        mRoot = remove(mRoot, z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 销毁AVL树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">AVLTree</span>&lt;T&gt;:</span>:destroy(AVLTreeNode&lt;T&gt;* &amp;tree)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tree-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        destroy(tree-&gt;left);</span><br><span class="line">    <span class="keyword">if</span> (tree-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        destroy(tree-&gt;right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">AVLTree</span>&lt;T&gt;:</span>:destroy()</span><br><span class="line">&#123;</span><br><span class="line">    destroy(mRoot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 打印"二叉查找树"</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *key        -- 节点的键值 </span></span><br><span class="line"><span class="comment"> *direction  --  0，表示该节点是根节点;</span></span><br><span class="line"><span class="comment"> *               -1，表示该节点是它的父结点的左孩子;</span></span><br><span class="line"><span class="comment"> *               1，表示该节点是它的父结点的右孩子。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">AVLTree</span>&lt;T&gt;:</span>:print(AVLTreeNode&lt;T&gt;* tree, T key, <span class="keyword">int</span> direction)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(direction==<span class="number">0</span>)    <span class="comment">// tree是根节点</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">2</span>) &lt;&lt; tree-&gt;key &lt;&lt; <span class="string">" is root"</span> &lt;&lt;<span class="string">", height is "</span>&lt;&lt;tree-&gt;height&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span>                <span class="comment">// tree是分支节点</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">2</span>) &lt;&lt; tree-&gt;key &lt;&lt; <span class="string">" is "</span> &lt;&lt; setw(<span class="number">2</span>) &lt;&lt; key &lt;&lt; <span class="string">"'s "</span>  &lt;&lt; setw(<span class="number">12</span>) &lt;&lt; (direction==<span class="number">1</span>?<span class="string">"right child"</span> : <span class="string">"left child"</span>) &lt;&lt;<span class="string">", height is "</span>&lt;&lt;tree-&gt;height&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        print(tree-&gt;left, tree-&gt;key, <span class="number">-1</span>);</span><br><span class="line">        print(tree-&gt;right,tree-&gt;key,  <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">AVLTree</span>&lt;T&gt;:</span>:print()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (mRoot != <span class="literal">NULL</span>)</span><br><span class="line">        print(mRoot, mRoot-&gt;key, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试文件-test-cpp"><a href="#测试文件-test-cpp" class="headerlink" title="测试文件 test.cpp"></a>测试文件 <code>test.cpp</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"AVLTree.cpp"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> arr[]= &#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">16</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TBL_SIZE(a) ( (sizeof(a)) / (sizeof(a[0])) )</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,ilen;</span><br><span class="line">    AVLTree&lt;<span class="keyword">int</span>&gt;* tree=<span class="keyword">new</span> AVLTree&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"== 依次添加: "</span>;</span><br><span class="line">    ilen = TBL_SIZE(arr);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;ilen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        tree-&gt;insert(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n== 前序遍历: "</span>;</span><br><span class="line">    tree-&gt;preOrder();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n== 中序遍历: "</span>;</span><br><span class="line">    tree-&gt;inOrder();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n== 后序遍历: "</span>;</span><br><span class="line">    tree-&gt;postOrder();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"== 高度: "</span> &lt;&lt; tree-&gt;height() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"== 最小值: "</span> &lt;&lt; tree-&gt;minimum() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"== 最大值: "</span> &lt;&lt; tree-&gt;maximum() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"== 树的详细信息: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    tree-&gt;print();</span><br><span class="line"></span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n== 删除根节点: "</span> &lt;&lt; i;</span><br><span class="line">    tree-&gt;remove(i);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n== 高度: "</span> &lt;&lt; tree-&gt;height() ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n== 中序遍历: "</span> ;</span><br><span class="line">    tree-&gt;inOrder();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n== 树的详细信息: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    tree-&gt;print();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁二叉树</span></span><br><span class="line">    tree-&gt;destroy();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法篇" scheme="https://fatboa.co/categories/%E7%AE%97%E6%B3%95%E7%AF%87/"/>
    
    
      <category term="c++" scheme="https://fatboa.co/tags/c/"/>
    
      <category term="数据结构" scheme="https://fatboa.co/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>mongodb操作之$slice</title>
    <link href="https://fatboa.co/2018/08/15/mongodb%E6%93%8D%E4%BD%9C%E4%B9%8B-slice/"/>
    <id>https://fatboa.co/2018/08/15/mongodb操作之-slice/</id>
    <published>2018-08-15T13:50:29.000Z</published>
    <updated>2019-05-10T10:53:39.742Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>    <div id="aplayer-OjWFzDMR" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><hr><blockquote><p>翻译原文：<a href="https://docs.mongodb.com/manual/reference/operator/update/slice/#examples" target="_blank" rel="noopener">https://docs.mongodb.com/manual/reference/operator/update/slice/#examples</a></p></blockquote><h2 id="slice（切分）"><a href="#slice（切分）" class="headerlink" title="$slice（切分）"></a>$slice（切分）</h2><p>当进行<code>$push</code>(插入)操作时，可以通过 <code>$slice</code>修饰词来限制插入的数组元素个数。如果想从一个只读操作中映射或是返回数组元素中特定的值，详见<a href="https://docs.mongodb.com/manual/reference/operator/projection/slice/#proj._S_slice" target="_blank" rel="noopener"><code>$slice</code></a>映射操作。<br><code>$slice</code>修饰词必须搭配<code>$each</code>修饰词才能使用。不过，你也可以传递一个空数组给<code>$each</code>修饰词，从而只让<code>$slice</code>修饰词起作用。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  $push: &#123;</span><br><span class="line">     &lt;field&gt;: &#123;</span><br><span class="line">       $each: [ &lt;value1&gt;, &lt;value2&gt;, ... ],</span><br><span class="line">       $slice: &lt;num&gt;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&lt; <strong>num</strong> &gt; 的值可以是：</p><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">更新数组&lt;<strong>field</strong>&gt;为空数组</td></tr><tr><td style="text-align:left">负数</td><td style="text-align:left">更新数组&lt;<strong>field</strong>&gt;只包含最后&lt;<strong>num</strong>&gt;个元素</td></tr><tr><td style="text-align:left">正数</td><td style="text-align:left">更新数组&lt;<strong>field</strong>&gt;只包含开头&lt;<strong>num</strong>&gt;个元素，适用于2.6以上版本</td></tr></tbody></table><h2 id="Behavior-行为"><a href="#Behavior-行为" class="headerlink" title="Behavior(行为)"></a>Behavior(行为)</h2><p>这些修饰词出现的顺序是无关紧要的。不过在上一个版本中，要求<code>$each</code>修饰词得作为第一个修饰词出现，如果要和<code>$slice</code>修饰词连用的话。这里有一份关于和<code>$push</code>搭配使用的修饰词列表，详见<a href="https://docs.mongodb.com/manual/reference/operator/update/push/#push-modifiers" target="_blank" rel="noopener">Modifiers</a>。<br>不结合<code>$each</code>修饰词而只使用<code>$slice</code>修饰词将会导致出错，不信可以试试。</p><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><h3 id="从数组末尾切片"><a href="#从数组末尾切片" class="headerlink" title="从数组末尾切片"></a>从数组末尾切片</h3><p>一个学生集合包含以下文档：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"_id"</span> : <span class="number">1</span>, <span class="attr">"scores"</span> : [ <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span> ] &#125;</span><br></pre></td></tr></table></figure></p><p>下面的操作增加一个新元素到<strong>scores</strong>数组中，然后使用<code>$slice</code>将数组修剪为最后五个元素。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.students.update(</span><br><span class="line">   &#123; _id: 1 &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     $push: &#123;</span><br><span class="line">       scores: &#123;</span><br><span class="line">         $each: [ 80, 78, 86 ],</span><br><span class="line">         $slice: -5</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>操作的结果就是将更新后的<strong>scores</strong>数组切分为最后5个元素<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"_id"</span> : <span class="number">1</span>, <span class="attr">"scores"</span> : [  <span class="number">50</span>,  <span class="number">60</span>,  <span class="number">80</span>,  <span class="number">78</span>,  <span class="number">86</span> ] &#125;</span><br></pre></td></tr></table></figure></p><h3 id="从数组头部切片"><a href="#从数组头部切片" class="headerlink" title="从数组头部切片"></a>从数组头部切片</h3><p>一个学生集合包含以下文档：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"_id"</span> : <span class="number">2</span>, <span class="attr">"scores"</span> : [ <span class="number">89</span>, <span class="number">90</span> ] &#125;</span><br></pre></td></tr></table></figure></p><p>下面的操作增加一个新元素到<strong>scores</strong>数组中，然后使用<code>$slice</code>修饰词修剪为前三个元素。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.students.update(</span><br><span class="line">   &#123; _id: 2 &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     $push: &#123;</span><br><span class="line">       scores: &#123;</span><br><span class="line">         $each: [ 100, 20 ],</span><br><span class="line">         $slice: 3</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>操作的结果就是将更新后的<strong>scores</strong>数组切分为前三个元素中。</p><h3 id="只用slice来更新数组"><a href="#只用slice来更新数组" class="headerlink" title="只用slice来更新数组"></a>只用slice来更新数组</h3><p>一个学生集合包含以下文档：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"_id"</span> : <span class="number">3</span>, <span class="attr">"scores"</span> : [  <span class="number">89</span>,  <span class="number">70</span>,  <span class="number">100</span>,  <span class="number">20</span> ] &#125;</span><br></pre></td></tr></table></figure></p><p>为了只用<code>$slice</code>修饰词来更新<strong>scores</strong>字段，我们得给出要切分的元素数量（比如 -3）赋给<code>slice</code>修饰词,而且赋一个空数组给<code>$each</code>修饰词，就像下面的代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.students.update(</span><br><span class="line">  &#123; _id: 3 &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    $push: &#123;</span><br><span class="line">      scores: &#123;</span><br><span class="line">         $each: [ ],</span><br><span class="line">         $slice: -3</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>操作的结果就是将scores数组切分为最后三个元素。</p><h3 id="slice-和push搭配使用"><a href="#slice-和push搭配使用" class="headerlink" title="slice 和push搭配使用"></a><code>slice</code> 和<code>push</code>搭配使用</h3><p>一个学生集合包含以下文档：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"_id"</span> : <span class="number">5</span>,</span><br><span class="line">   <span class="attr">"quizzes"</span> : [</span><br><span class="line">      &#123; <span class="attr">"wk"</span>: <span class="number">1</span>, <span class="attr">"score"</span> : <span class="number">10</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">"wk"</span>: <span class="number">2</span>, <span class="attr">"score"</span> : <span class="number">8</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">"wk"</span>: <span class="number">3</span>, <span class="attr">"score"</span> : <span class="number">5</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">"wk"</span>: <span class="number">4</span>, <span class="attr">"score"</span> : <span class="number">6</span> &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面的<code>$push</code>操作将会：</p><ul><li>使用<code>$each</code>修饰词来增加多个文档到<strong>quizzes</strong>数组中，</li><li>使用<code>$sort</code>修饰词，按照<strong>score</strong>字段来降序排序修改过的<strong>quizzies</strong>数组中的全部元素，</li><li>使用<code>$slice</code>修饰词，只保留<strong>quizzes</strong>数排中前三个排序过的元素。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">db.students.update(</span><br><span class="line">   &#123; _id: 5 &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     $push: &#123;</span><br><span class="line">       quizzes: &#123;</span><br><span class="line">          $each: [ &#123; wk: 5, score: 8 &#125;, &#123; wk: 6, score: 7 &#125;, &#123; wk: 7, score: 6 &#125; ],</span><br><span class="line">          $sort: &#123; score: -1 &#125;,</span><br><span class="line">          $slice: 3</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>操作结果就是只保留了quizzes数组中分数最高的三个元素。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_id"</span> : <span class="number">5</span>,</span><br><span class="line">  <span class="attr">"quizzes"</span> : [</span><br><span class="line">     &#123; <span class="attr">"wk"</span> : <span class="number">1</span>, <span class="attr">"score"</span> : <span class="number">10</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">"wk"</span> : <span class="number">2</span>, <span class="attr">"score"</span> : <span class="number">8</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">"wk"</span> : <span class="number">5</span>, <span class="attr">"score"</span> : <span class="number">8</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面操作中的修饰词都会被Mongodb自行处理，所有它们之间的书写顺序无关紧要。更多详情请见<a href="https://docs.mongodb.com/manual/reference/operator/update/push/#push-modifiers" target="_blank" rel="noopener">Modifiers</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="翻译篇" scheme="https://fatboa.co/categories/%E7%BF%BB%E8%AF%91%E7%AF%87/"/>
    
    
      <category term="mongodb" scheme="https://fatboa.co/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>oracle之表信息查询</title>
    <link href="https://fatboa.co/2018/08/10/oracle%E4%B9%8B%E8%A1%A8%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2/"/>
    <id>https://fatboa.co/2018/08/10/oracle之表信息查询/</id>
    <published>2018-08-10T13:41:43.000Z</published>
    <updated>2019-05-10T10:53:39.741Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>    <div id="aplayer-SrWwzDxl" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><hr><blockquote><p>个人笔记，如有描述不当，欢迎留言指出~</p></blockquote><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>主管抽风，想查询数据库’dbo‘中各表字段结构、外键信息、索引信息。于是任务交给了我…</p><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 各表字段结构</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  TABLE_SCHEMA   数据库,</span><br><span class="line">  table_name     表名,</span><br><span class="line">  column_name    字段名,</span><br><span class="line">  data_type      类型,</span><br><span class="line">  is_nullable    是否为空,</span><br><span class="line">  column_default 默认值</span><br><span class="line"><span class="keyword">FROM</span> information_schema.columns</span><br><span class="line"><span class="keyword">WHERE</span> TABLE_SCHEMA = <span class="string">'dbo'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 各表外键信息</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  object_name(parent_object_id)                        表名,</span><br><span class="line">  object_name(constraint_object_id)                    约束名称,</span><br><span class="line">  col_name(parent_object_id, parent_column_id)         外键字段,</span><br><span class="line">  object_name(referenced_object_id)                    关联表名,</span><br><span class="line">  col_name(referenced_object_id, referenced_column_id) 关联表字段</span><br><span class="line"><span class="keyword">FROM</span> sys.foreign_key_columns</span><br><span class="line"><span class="keyword">WHERE</span> referenced_object_id <span class="keyword">IN</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> object_id(T.table_name)</span><br><span class="line">  <span class="keyword">FROM</span> (</span><br><span class="line">         <span class="keyword">SELECT</span> table_name</span><br><span class="line">         <span class="keyword">FROM</span> information_schema.columns</span><br><span class="line">         <span class="keyword">WHERE</span> TABLE_SCHEMA = <span class="string">'dbo'</span></span><br><span class="line">       ) T</span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> object_name(parent_object_id)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 各表索引信息</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  object_name(object_id) 表名,</span><br><span class="line">  <span class="keyword">name</span>                   索引名,</span><br><span class="line">  is_unique              是否唯一</span><br><span class="line"><span class="keyword">FROM</span> sys.indexes</span><br><span class="line"><span class="keyword">WHERE</span> Object_id <span class="keyword">IN</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> object_id(T.table_name)</span><br><span class="line">  <span class="keyword">FROM</span> (</span><br><span class="line">         <span class="keyword">SELECT</span> table_name</span><br><span class="line">         <span class="keyword">FROM</span> information_schema.columns</span><br><span class="line">         <span class="keyword">WHERE</span> TABLE_SCHEMA = <span class="string">'dbo'</span></span><br><span class="line">       ) T</span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 表名</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="数据库" scheme="https://fatboa.co/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="sql" scheme="https://fatboa.co/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>oracle之多表统计查询</title>
    <link href="https://fatboa.co/2018/08/09/oracle%E4%B9%8B%E5%A4%9A%E8%A1%A8%E7%BB%9F%E8%AE%A1%E6%9F%A5%E8%AF%A2/"/>
    <id>https://fatboa.co/2018/08/09/oracle之多表统计查询/</id>
    <published>2018-08-09T13:58:40.000Z</published>
    <updated>2019-05-10T10:53:39.741Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>    <div id="aplayer-QrlVJCxH" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><hr><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>主管想根据时间范围统计下各标段各桥梁部件的录入数量，这个任务就交给我吧…</p><h2 id="表介绍"><a href="#表介绍" class="headerlink" title="表介绍"></a>表介绍</h2><ul><li><strong>qr_code_item_type</strong>：桥梁部件类型表，类型有桩基、承台、墩柱等</li><li><strong>qr_code_item1</strong> ：桥梁墩柱类部件信息表，关联表<em>qr_code_item_type</em>、<em>qr_code_main</em></li><li><strong>qr_code_item2</strong> ：桥梁梁类部件信息表，关联表<em>qr_code_item_type</em>、<em>qr_code_main</em></li><li><strong>qr_code_main</strong>：桥梁标段表<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> itype.id,<span class="keyword">isnull</span>(total, <span class="number">0</span>) total</span><br><span class="line"><span class="keyword">FROM</span> qr_code_item_type itype</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (</span><br><span class="line">              <span class="keyword">SELECT</span> item.item_type_id <span class="keyword">type</span>,<span class="keyword">COUNT</span>(*) total</span><br><span class="line">              <span class="keyword">FROM</span> qr_code_item item</span><br><span class="line">              <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> qr_code_main <span class="keyword">main</span> <span class="keyword">ON</span> item.qr_code_main_id = main.id</span><br><span class="line">              <span class="keyword">WHERE</span> main.section = <span class="number">2</span> <span class="keyword">AND</span> <span class="keyword">isnull</span>(item.update_time, item.create_time) <span class="keyword">BETWEEN</span> <span class="string">'20180301'</span> <span class="keyword">AND</span> <span class="string">'20180801'</span></span><br><span class="line">              <span class="keyword">GROUP</span> <span class="keyword">BY</span> item.item_type_id</span><br><span class="line">              <span class="keyword">UNION</span> ALL</span><br><span class="line">              <span class="keyword">SELECT</span> item.item_type_id <span class="keyword">type</span>, <span class="keyword">COUNT</span>(*) total</span><br><span class="line">              <span class="keyword">FROM</span> qr_code_item2 item</span><br><span class="line">              <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> qr_code_main <span class="keyword">main</span> <span class="keyword">ON</span> item.qr_code_main_id = main.id</span><br><span class="line">              <span class="keyword">WHERE</span> main.section = <span class="number">2</span> <span class="keyword">AND</span> <span class="keyword">isnull</span>(item.update_time, item.create_time) <span class="keyword">BETWEEN</span> <span class="string">'20180301'</span> <span class="keyword">AND</span> <span class="string">'20180801'</span></span><br><span class="line">              <span class="keyword">GROUP</span> <span class="keyword">BY</span> item.item_type_id</span><br><span class="line">            )</span><br><span class="line">            aa <span class="keyword">ON</span> itype.id = aa.type</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> itype.id</span><br></pre></td></tr></table></figure></li></ul><p>ps:墩柱类、梁类虽都属于部件类，但具体信息差别较大，故分成两个表，所以统计的时候使用了联合查询</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="数据库" scheme="https://fatboa.co/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="sql" scheme="https://fatboa.co/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>mongodb之主从、集群、分片</title>
    <link href="https://fatboa.co/2018/08/07/mongodb%E4%B9%8B%E4%B8%BB%E4%BB%8E%E3%80%81%E9%9B%86%E7%BE%A4%E3%80%81%E5%88%86%E7%89%87/"/>
    <id>https://fatboa.co/2018/08/07/mongodb之主从、集群、分片/</id>
    <published>2018-08-07T14:04:05.000Z</published>
    <updated>2019-05-10T10:53:39.740Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>    <div id="aplayer-pwucqIlt" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><hr><blockquote><p>个人笔记，如有描述不当，欢迎留言指出~</p></blockquote><h2 id="核心语句"><a href="#核心语句" class="headerlink" title="核心语句"></a>核心语句</h2><p>博客也好，官网也罢，密密麻麻一堆话，提炼浓缩就下面这几行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主从复制</span></span><br><span class="line">mongod --port 27018 --dbpath <span class="string">"F:\mongodbSet\mongodb1\data"</span> --logpath <span class="string">"F:\mongodbSet\mongodb1\log\mongodb.log"</span> --logappend --master</span><br><span class="line">mongod --port 27019 --dbpath <span class="string">"F:\mongodbSet\mongodb2\data"</span> --logpath <span class="string">"F:\mongodbSet\mongodb2\log\mongodb.log"</span> --logappend --slave --<span class="built_in">source</span>=127.0.0.1:27018</span><br><span class="line"></span><br><span class="line"><span class="comment">#副本集</span></span><br><span class="line">mongod --port 27018 --dbpath <span class="string">"F:\mongodbSet\mongodb1\data"</span> --logpath <span class="string">"F:\mongodbSet\mongodb1\log\mongodb.log"</span> --logappend --replSet myrs</span><br><span class="line">mongod --port 27019 --dbpath <span class="string">"F:\mongodbSet\mongodb2\data"</span> --logpath <span class="string">"F:\mongodbSet\mongodb2\log\mongodb.log"</span> --logappend --replSet myrs</span><br><span class="line">mongod --port 27020 --dbpath <span class="string">"F:\mongodbSet\mongodb3\data"</span> --logpath <span class="string">"F:\mongodbSet\mongodb3\log\mongodb.log"</span> --logappend --replSet myrs</span><br><span class="line"></span><br><span class="line"><span class="comment">#分片+副本集</span></span><br><span class="line"><span class="comment">#config</span></span><br><span class="line">mongod --port 27018 --bind_ip 127.0.0.1 --configsvr --dbpath <span class="string">"F:\mongodbSet\config\mongodb1\data"</span> --logpath <span class="string">"F:\mongodbSet\config\mongodb1\log\mongodb.log"</span> --logappend --replSet configs</span><br><span class="line">mongod --port 27019 --bind_ip 127.0.0.1 --configsvr --dbpath <span class="string">"F:\mongodbSet\config\mongodb2\data"</span> --logpath <span class="string">"F:\mongodbSet\config\mongodb2\log\mongodb.log"</span> --logappend --replSet configs</span><br><span class="line">mongod --port 27020 --bind_ip 127.0.0.1 --configsvr --dbpath <span class="string">"F:\mongodbSet\config\mongodb3\data"</span> --logpath <span class="string">"F:\mongodbSet\config\mongodb3\log\mongodb.log"</span> --logappend --replSet configs</span><br><span class="line"></span><br><span class="line"><span class="comment">#shard</span></span><br><span class="line">mongod --port 27024 --bind_ip 127.0.0.1 --shardsvr --dbpath <span class="string">"F:\mongodbSet\shared\mongodb1\data"</span> --logpath <span class="string">"F:\mongodbSet\shared\mongodb1\log\mongodb.log"</span> --logappend --replSet shard</span><br><span class="line">mongod --port 27025 --bind_ip 127.0.0.1 --shardsvr --dbpath <span class="string">"F:\mongodbSet\shared\mongodb2\data"</span> --logpath <span class="string">"F:\mongodbSet\shared\mongodb2\log\mongodb.log"</span> --logappend --replSet shard</span><br><span class="line">mongod --port 27026 --bind_ip 127.0.0.1 --shardsvr --dbpath <span class="string">"F:\mongodbSet\shared\mongodb3\data"</span> --logpath <span class="string">"F:\mongodbSet\shared\mongodb3\log\mongodb.log"</span> --logappend --replSet shard</span><br><span class="line"></span><br><span class="line"><span class="comment">#mongos</span></span><br><span class="line">mongos --port 27021 --configdb configs/127.0.0.1:27018,127.0.0.1:27019,127.0.0.1:27020  --replSet mongos</span><br></pre></td></tr></table></figure></p><h3 id="相关命令解释"><a href="#相关命令解释" class="headerlink" title="相关命令解释"></a>相关命令解释</h3><ul><li>–port &lt;端口号&gt;： 设置mongo服务开启的端口</li><li>–dbpath &lt;数据存储路径&gt;：设置mongo数据存储路径      </li><li>–logpath  &lt;日志存储路径&gt;：设置mongo日志存储路径</li><li>–logappend ：启用日志追加方式，否则新日志会覆盖旧日志</li><li>–master ：设置为master方</li><li>–slave：设置为slave方</li><li>–source = &lt; ip : port&gt;：设置master服务的地址</li><li>–replSet &lt;集群名&gt;：设置集群名称</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="数据库" scheme="https://fatboa.co/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mongodb" scheme="https://fatboa.co/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>我的装备清单</title>
    <link href="https://fatboa.co/2018/08/06/%E6%88%91%E7%9A%84%E8%A3%85%E5%A4%87%E6%B8%85%E5%8D%95/"/>
    <id>https://fatboa.co/2018/08/06/我的装备清单/</id>
    <published>2018-08-06T06:45:42.000Z</published>
    <updated>2019-05-10T10:53:39.740Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>    <div id="aplayer-ohncdCfQ" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><hr><blockquote><p>个人笔记，如有描述不当，欢迎留言指出~</p></blockquote><h2 id="why"><a href="#why" class="headerlink" title="why?"></a>why?</h2><p><code>随着技术栈的加深，认识的语言和工具也越来越多，若是整理出一份清单，重装环境的时候想想头就大...</code></p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li><a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">Maven</a></li><li><a href="https://www.dosbox.com/download.php?main=1" target="_blank" rel="noopener">DosBox</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li><li><a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">Python</a></li><li><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a></li><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Java</a></li><li><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">nginx</a></li><li><a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">nvm</a></li><li><a href="http://www.masm32.com/download.htm" target="_blank" rel="noopener">masm32</a></li></ul><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul><li>IDE<ul><li><a href="http://www.jetbrains.com/idea/download/#section=windows" target="_blank" rel="noopener">IntelliJ IDEA</a></li><li><a href="http://www.jetbrains.com/pycharm/download/#section=windows" target="_blank" rel="noopener">PyCharm</a></li><li><a href="http://www.jetbrains.com/webstorm/?fromMenu" target="_blank" rel="noopener">WebStorm</a></li><li><a href="https://pan.baidu.com/s/1QSyG44AFYZ-qxBAcF3QnFw" target="_blank" rel="noopener">Visual C++6.0</a> 密码:ec13</li></ul></li><li>反编译神器<ul><li><a href="https://bytecodeviewer.com/" target="_blank" rel="noopener">Bytecode Viewer</a> </li></ul></li><li>数据可视化工具<ul><li><a href="http://www.jetbrains.com/datagrip/" target="_blank" rel="noopener">DataGrip</a> </li><li><a href="https://redisdesktop.com/download" target="_blank" rel="noopener">Redis Desktop Manager</a></li><li><a href="https://www.mongodbmanager.com/download" target="_blank" rel="noopener">NoSQL Manager</a></li></ul></li><li>虚拟机<ul><li><a href="https://pan.baidu.com/s/1Ls5pGBe5QmCEJMsHqI06CQ" target="_blank" rel="noopener">vmware</a> 密码：t8i3</li></ul></li><li>容器<ul><li><a href="https://store.docker.com/search?type=edition&amp;offering=enterprise" target="_blank" rel="noopener">Docker</a> </li></ul></li><li>git管理工具<ul><li><a href="https://tortoisegit.org/download/" target="_blank" rel="noopener">小乌龟</a></li></ul></li><li>终端连接工具<ul><li><a href="https://www.netsarang.com/download/software2.html" target="_blank" rel="noopener">xshell</a></li></ul></li><li>远程桌面工具<ul><li><a href="https://www.teamviewer.com/zhcn/download/windows/" target="_blank" rel="noopener">TeamViewer</a></li></ul></li><li>下载神器<ul><li><a href="http://idman.ys168.com/" target="_blank" rel="noopener">IDM</a></li></ul></li><li>转码神器<ul><li><a href="http://ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a> </li></ul></li><li>科学上网<ul><li><a href="https://pan.baidu.com/s/1jqMJGHVqfyB1FJqW9tYj_w" target="_blank" rel="noopener">shadowsocksR</a> 密码：0w5g</li></ul></li><li>其他<ul><li><a href="https://www.yinxiang.com/" target="_blank" rel="noopener">印象笔记</a> </li><li><a href="https://maxiang.io/" target="_blank" rel="noopener">马克飞象</a></li><li><a href="https://pc.weixin.qq.com/" target="_blank" rel="noopener">微信</a></li><li><a href="https://www.google.cn/chrome/" target="_blank" rel="noopener">Chrome</a>(需翻墙)</li><li><a href="https://www.huorong.cn/" target="_blank" rel="noopener">火绒</a>(比360良心100倍) </li><li><a href="https://pan.baidu.com/download" target="_blank" rel="noopener">百度网盘</a></li><li><a href="https://www.7-zip.org/" target="_blank" rel="noopener">7-zip</a> </li><li><a href="https://www.getpostman.com/apps" target="_blank" rel="noopener">Postman</a>(restfulsapi 调试神器 )</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="环境安装篇" scheme="https://fatboa.co/categories/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E7%AF%87/"/>
    
    
      <category term="清单" scheme="https://fatboa.co/tags/%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>Flex-Layout之声明式API概述</title>
    <link href="https://fatboa.co/2018/08/04/Flex-Layout%E4%B9%8B%E5%A3%B0%E6%98%8E%E5%BC%8FAPI%E6%A6%82%E8%BF%B0/"/>
    <id>https://fatboa.co/2018/08/04/Flex-Layout之声明式API概述/</id>
    <published>2018-08-04T13:24:09.000Z</published>
    <updated>2019-05-10T10:53:39.739Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>    <div id="aplayer-ODySdFXU" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><hr><blockquote><p>翻译原文：<a href="https://github.com/angular/flex-layout/wiki/Declarative-API-Overview" target="_blank" rel="noopener">https://github.com/angular/flex-layout/wiki/Declarative-API-Overview</a></p></blockquote><h2 id="静态API概述"><a href="#静态API概述" class="headerlink" title="静态API概述"></a>静态API概述</h2><p>Flex layout 的特点就是提供敏捷的语法性的指令允许开发者利用弹性盒子CSS样式来轻松直观地创建响应且自适应的布局。</p><blockquote><p>这个<strong>API</strong>概述可以被视作静态的，提供一个随浏览器宽度改变而调整元素的大小和位置的用户体验。这个静态API可以被视为默认桌面布局API。<br>开发者应该使用响应式API来支持手机或平板设备的交互式布局配置。</p></blockquote><p><strong>Flex-Layout</strong> 是一组直观的HTML指令（aka属性）列表，可以被用于HTML容器和元素。开发者可以直接在HTML中定义他们自己的布局声明。<br>一个重要的基本的概念就是理解哪些API被用在DOM容器上，哪些被用在DOM容器的子元素上。</p><h3 id="用于DOM容器的API："><a href="#用于DOM容器的API：" class="headerlink" title="用于DOM容器的API："></a><strong>用于DOM容器的API：</strong></h3><table><thead><tr><th style="text-align:left">HTML</th><th style="text-align:center">API</th><th style="text-align:center">Allowed values</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/angular/flex-layout/wiki/fxLayout-API" target="_blank" rel="noopener">fxLayout</a></td><td style="text-align:center">&lt; direction &gt; [wrap]</td><td style="text-align:center">row / column / row-reverse / column-reverase</td></tr><tr><td style="text-align:left"><a href="https://github.com/angular/flex-layout/wiki/fxLayoutAlign-API" target="_blank" rel="noopener">fxLayoutAlign</a></td><td style="text-align:center">&lt; main-axis &gt; &lt; cross-axis&gt;</td><td style="text-align:center">main-axis: start / center / end / space-around / space-between; cross-axis: start / center / end / stretch</td></tr><tr><td style="text-align:left"><a href="https://github.com/angular/flex-layout/wiki/fxLayoutGap-API" target="_blank" rel="noopener">fxLayoutGap</a></td><td style="text-align:center">% / px / vw / vh</td></tr></tbody></table><blockquote><p>这些指令会影响容器中子元素的流向和布局。</p></blockquote><h3 id="用于DOM元素的API："><a href="#用于DOM元素的API：" class="headerlink" title="用于DOM元素的API："></a><strong>用于DOM元素的API：</strong></h3><table><thead><tr><th style="text-align:left">HTML</th><th style="text-align:center">Allowed values</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/angular/flex-layout/wiki/fxFlex-API" target="_blank" rel="noopener"><em>fxFlex</em></a></td><td style="text-align:center">“” / px / % / vw / vh   &lt; grow&gt; &lt; shrink&gt; &lt; basis&gt;</td></tr><tr><td style="text-align:left"><a href="https://github.com/angular/flex-layout/wiki/fxFlexOrder-API" target="_blank" rel="noopener"><em>fxFlexOrder</em></a></td><td style="text-align:center">int</td></tr><tr><td style="text-align:left"><a href="https://github.com/angular/flex-layout/wiki/fxFlexOffset-API" target="_blank" rel="noopener"><em>fxFlexOffset</em></a></td><td style="text-align:center">% / px / vw / vh</td></tr><tr><td style="text-align:left"><a href="https://github.com/angular/flex-layout/wiki/fxFlexAlign-API" target="_blank" rel="noopener"><em>fxFlexAligin</em></a></td><td style="text-align:center">start / baseline / center / end</td></tr><tr><td style="text-align:left"><a href="https://github.com/angular/flex-layout/wiki/fxFlexFill-API" target="_blank" rel="noopener"><em>fxFlexFill,fxFill</em></a></td></tr></tbody></table><blockquote><p>这些指令影响宿主元素的布局和大小。注意这些API期望它们的宿主元素内置于一个弹性盒子的DOM容器里（一个块元素，它本身使用布局API来作为容器）。</p></blockquote><h3 id="用于任意元素的API-："><a href="#用于任意元素的API-：" class="headerlink" title="用于任意元素的API ："></a><strong>用于任意元素的API ：</strong></h3><table><thead><tr><th style="text-align:left">HTML API</th><th style="text-align:center">Allowed values</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/angular/flex-layout/wiki/fxShow-API" target="_blank" rel="noopener">fxHide</a></td><td style="text-align:center">TRUE / FALSE / 0 / “”</td></tr><tr><td style="text-align:left"><a href="https://github.com/angular/flex-layout/wiki/fxShow-API" target="_blank" rel="noopener">fxShow</a></td><td style="text-align:center">TRUE / FALSE / 0 / “”</td></tr><tr><td style="text-align:left"><a href="https://github.com/angular/flex-layout/wiki/ngClass-API" target="_blank" rel="noopener">ngClass</a></td><td style="text-align:center">@extends <a href="https://angular.io/api/common/NgClass" target="_blank" rel="noopener">ngClass</a> core</td></tr><tr><td style="text-align:left"><a href="https://github.com/angular/flex-layout/wiki/fxHide-API" target="_blank" rel="noopener">ngStyle</a></td><td style="text-align:center">@extends <a href="https://angular.io/api/common/NgStyle" target="_blank" rel="noopener">ngStyle</a> core</td></tr><tr><td style="text-align:left"><a href="https://github.com/angular/flex-layout/wiki/imgSrc-API" target="_blank" rel="noopener">imgSrc</a></td><td style="text-align:center">@extends  src attribute</td></tr></tbody></table><p>下面展示的是使用容器和元素的静态API来写的一个简单的HTML标记：<br><figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div fxLayout='column' class="zero"&gt;</span><br><span class="line">  &lt;div fxFlex="33" class="one" &gt;&lt;/div&gt;</span><br><span class="line">  &lt;div fxFlex="33%" [fxLayout]="direction" class="two"&gt;</span><br><span class="line">    &lt;div fxFlex="22%"    class="two_one"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div fxFlex="205px"  class="two_two"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div fxFlex="30"     class="two_three"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div fxFlex class="three"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>Flex Layout指令直接分配CSS样式内嵌到宿主元素中，这些内嵌样式会覆盖掉继承的样式、影子DOM样式，甚至是所有基于:host元素的影子DOM树形样式。</p><h2 id="响应式API"><a href="#响应式API" class="headerlink" title="响应式API"></a>响应式API</h2><p>Flex-Layout 也拥有一套巨大的响应特征来确保开发者能够轻松地改变不同显示设备之间的用户体验布局配置。更多文档资料请至<a href="https://github.com/angular/flex-layout/wiki/Responsive-API" target="_blank" rel="noopener"> Responsive API page</a>。</p><blockquote><p>本文仅作翻译，关于弹性布局框架的相关知识，推荐<a href="https://orangexc.xyz/2016/10/14/Do-it-yourself-to-achieve-a-Flex-Layout-Framework/" target="_blank" rel="noopener">博文</a>。<br>后期我会抽空翻译Flex-Layout的其他文章。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="翻译篇" scheme="https://fatboa.co/categories/%E7%BF%BB%E8%AF%91%E7%AF%87/"/>
    
    
      <category term="flex-layout" scheme="https://fatboa.co/tags/flex-layout/"/>
    
  </entry>
  
  <entry>
    <title>Nginx之正反向代理</title>
    <link href="https://fatboa.co/2018/08/02/Nginx%E4%B9%8B%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>https://fatboa.co/2018/08/02/Nginx之正反向代理/</id>
    <published>2018-08-02T14:01:08.000Z</published>
    <updated>2019-05-10T10:53:39.739Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>    <div id="aplayer-LmtchVHp" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><hr><blockquote><p>个人笔记，如有描述不当，欢迎留言指出~</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>科学上网过的小伙伴们都知道，目前这些上网工具<strong>SS</strong>、<strong>SSR</strong>、<strong>V2Ray</strong>等等，说白了就是通过代理让我们得以愉快地遨游在知识的海洋里。</p><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>正向代理是什么？由于某些网站访问奇慢，或者墙的问题根本无法访问时，通过给浏览器配置代理ip和端口，让代理服务器转发我们请求，而后将响应结果传回浏览器，这就是正向代理。举个通俗的栗子，就好比你自己没找到合适的房子，于是你通过房租中介来租到好房子。大致流程如下：<br><img src="http://fatboa.gz.bcebos.com/img/posts/nginx%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/1650d268c4d53ad4.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-09-05T00%3A54%3A25Z%2F-1%2Fhost%2F1d4d5de5e3a8bfc143f405bba552a4fdf9fcd0b160fc9f703d4a8ba1d1bf8dae" alt="Alt text"></p><h3 id="nginx正向代理主要配置"><a href="#nginx正向代理主要配置" class="headerlink" title="nginx正向代理主要配置"></a>nginx正向代理主要配置</h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>在虚拟机上部署了一台nginx服务器（有独立局域网ip）<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;  </span><br><span class="line">    <span class="attribute">resolver</span> <span class="number">114.114.114.114</span> <span class="number">8.8.8.8</span>; <span class="comment">#指定DNS服务器IP地址  </span></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8888</span>;  <span class="comment">#监听端口</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;  </span><br><span class="line">        <span class="attribute">proxy_pass</span> <span class="variable">$scheme</span>://<span class="variable">$host</span><span class="variable">$request_uri</span>; <span class="comment">#设定代理服务器的协议和地址  </span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后重启nginx生效</p><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>打开Chrome浏览器-&gt;设置-&gt;高级-&gt;系统-&gt;打开代理设置，如图所示：<br><img src="http://fatboa.gz.bcebos.com/img/posts/nginx%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/dffe3423424.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-09-05T01%3A00%3A49Z%2F-1%2Fhost%2F7eb19ac366de4f1e50d8a2351320492f81c8534bf7adac95597a0057d291c35b" alt="Alt text"></p><p>其中，192.168.1.44就是你新建虚拟机的独立局域网IP。</p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>你可以这么理解，正向代理服务器只是转发代理请求，并不提供自己的服务；而反向代理可以提供自己的服务。比如说，有个请求想要访问你公司内网服务器，而实际公司只有一个公共IP，内网IP并没有映射，所以这时候你就可以使用nginx反向代理来实现内网资源的请求。另外，如果访问量过大，还可以使用nginx来进行负载均衡。大致流程如下：<br><img src="http://fatboa.gz.bcebos.com/img/posts/nginx%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/1650d305717b0135.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-09-05T00%3A59%3A57Z%2F-1%2Fhost%2Fb99d1a8081ef04fde19c0b7543b96ecd45fe851bb32cf875f85ebcb487be15a8" alt="Alt text"></p><h3 id="nginx反向代理主要配置"><a href="#nginx反向代理主要配置" class="headerlink" title="nginx反向代理主要配置"></a>nginx反向代理主要配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span>  clusterserver &#123;  </span><br><span class="line"><span class="comment">#不设置，则默认是轮询</span></span><br><span class="line"><span class="comment">#least_conn; #最少连接数</span></span><br><span class="line"><span class="comment">#ip_hash;  #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span></span><br><span class="line"><span class="attribute">server</span>    <span class="number">192.1.168.45:9991</span> weight=<span class="number">1</span>; <span class="comment">#weight值为1~10，代表权重，和访问比率成正比，用于后端服务器性能不均的情况</span></span><br><span class="line"><span class="attribute">server</span>    <span class="number">192.1.168.46:9991</span> weight=<span class="number">1</span>;</span><br><span class="line"><span class="comment">#server    192.1.168.45:9993 weight=1 down; #手工设置该服务不可用</span></span><br><span class="line"><span class="comment">#server    192.1.168.45:9994 weight=1 backup; #其他主服务器都挂了，自动开启这个备用服务。</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">       <span class="attribute">listen</span>       <span class="number">9999</span>;</span><br><span class="line">       <span class="attribute">server_name</span>  xxx; <span class="comment">#你的域名或者公共IP</span></span><br><span class="line">       <span class="attribute">location</span> / &#123;</span><br><span class="line">           <span class="attribute">root</span>   html;</span><br><span class="line">           <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://clusterserver; </span><br><span class="line"><span class="attribute">proxy_connect_timeout</span>   <span class="number">1</span>; <span class="comment">#单位为秒 超时设置，如果超时将请求其他服务</span></span><br><span class="line"><span class="comment">#proxy_send_timeout     1;  </span></span><br><span class="line"><span class="comment">#proxy_read_timeout     1; </span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">       <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">           <span class="attribute">root</span>   html;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这样当代理服务器监听到9999端口的请求时，根据proxy_pass配置找到名为clusterserver的upstream 节点来进行负载均衡。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="后端笔记" scheme="https://fatboa.co/categories/%E5%90%8E%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="nginx" scheme="https://fatboa.co/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>powershell之启动远程jar服务</title>
    <link href="https://fatboa.co/2018/07/29/powershell%E4%B9%8B%E5%90%AF%E5%8A%A8%E8%BF%9C%E7%A8%8Bjar%E6%9C%8D%E5%8A%A1/"/>
    <id>https://fatboa.co/2018/07/29/powershell之启动远程jar服务/</id>
    <published>2018-07-29T13:20:21.000Z</published>
    <updated>2019-05-10T10:53:39.738Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>    <div id="aplayer-JVBjFDuZ" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><hr><blockquote><p>个人笔记，如有描述不当，欢迎留言指出~</p></blockquote><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>主管抽风说每次都要登录远程服务器再启动jar太麻烦了，要是有个一键启动远程jar的批处理就是。于是这个任务就交给我了…</p><h2 id="powershell配置"><a href="#powershell配置" class="headerlink" title="powershell配置"></a>powershell配置</h2><p>用管理员权限启动 PowerShell,执行下面的命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#客户端或服务器公共配置:</span></span><br><span class="line">Get-Service WinRM   <span class="comment">#查看WinRM服务的状态</span></span><br><span class="line">Enable-PSRemoting –Force   <span class="comment">#配置系统接受远程命令</span></span><br><span class="line">Set-Service WinRM -StartMode Automatic   <span class="comment">#开启WinRM服务自启动</span></span><br><span class="line">winrm <span class="built_in">set</span> winrm/config/winrs <span class="string">'@&#123;MaxMemoryPerShellMB="3000"&#125;'</span>  <span class="comment">#设置powershell最大内存 方法一推荐</span></span><br><span class="line">Set-Item WSMan:\localhost\Plugin\Microsoft.PowerShell\Quotas\MaxMemoryPerShellMB 3000   <span class="comment">#设置最大内存 方法二</span></span><br><span class="line">Restart-Service winrm //重启winrm服务使配置生效</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务器配置:</span></span><br><span class="line">Set-Item WSMan:localhost\client\trustedhosts -value <span class="string">"192.168.1.44,192.168.1.45"</span>  <span class="comment">#设置设置主机可信任的客户端地址</span></span><br><span class="line">winrm <span class="built_in">set</span> winrm/config/client @&#123;TrustedHosts=<span class="string">"192.168.1.45,192.168.1.44"</span>&#125;  <span class="comment">#设置设置主机可信任的客户端地址，当上个命令无效时，可选用该命令（该命令请在cmd中使用） </span></span><br><span class="line">Get-Item WSMan:\localhost\Client\TrustedHosts  <span class="comment">#查看可信任主机</span></span><br><span class="line">get-executionpolicy  <span class="comment">#查看脚本执行策略</span></span><br><span class="line"><span class="built_in">set</span>-executionpolicy remotesigned  <span class="comment">#设置执行策略为远程可执行</span></span><br><span class="line">Restart-Service winrm <span class="comment">#重启服务生效</span></span><br><span class="line"></span><br><span class="line">Test-WsMan xxx.xxx.xxx.xxx <span class="comment">#客户端测试远程连接</span></span><br></pre></td></tr></table></figure></p><h2 id="jar包上传处理命令"><a href="#jar包上传处理命令" class="headerlink" title="jar包上传处理命令"></a>jar包上传处理命令</h2><blockquote><p>服务器上必须安装了ftp,否则没法上传文件。我公司服务器系统是windows server 2008,用它自带的IIS创建ftp,并设置虚拟目录。</p></blockquote><p>新建上传文件脚本<strong>up.bat</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST 192.168.1.44:8886/shutdown <span class="comment">#关闭44服务器上8886端口服务</span></span><br><span class="line">curl -X POST 192.168.1.44:8887/shutdown<span class="comment">#关闭44服务器上8887端口服务</span></span><br><span class="line">curl -X POST 192.168.1.44:8888/shutdown<span class="comment">#关闭44服务器上8888端口服务</span></span><br><span class="line"></span><br><span class="line">Echo open 192.168.1.44 &gt;ftp.up <span class="comment">#打开连接44服务器ftp连接</span></span><br><span class="line">Echo Administrator&gt;&gt;ftp.up <span class="comment">#服务器上登录用户名</span></span><br><span class="line">Echo 59@SDS25&gt;&gt;ftp.up <span class="comment">#登录密码</span></span><br><span class="line">Echo <span class="built_in">cd</span> .\project1&gt;&gt;ftp.up <span class="comment">#因为进入的是ftp的根目录，所以使用.\project1,进入根目录下的project1</span></span><br><span class="line">Echo binary&gt;&gt;ftp.up <span class="comment">#二进制数据传输格式</span></span><br><span class="line">Echo put <span class="string">"E:\Workspace\idea\jcnyJava\target\jcny-java-0.0.1-SNAPSHOT.jar"</span>&gt;&gt;ftp.up <span class="comment">#传送本地文件到ftp中</span></span><br><span class="line">Echo <span class="built_in">cd</span> ..\project2&gt;&gt;ftp.up <span class="comment">#使用..\project2,进入根目录下的project2目录</span></span><br><span class="line">Echo put <span class="string">"E:\Workspace\idea\jcnyJava\target\jcny-java-0.0.1-SNAPSHOT.jar.original"</span>&gt;&gt;ftp.up <span class="comment">#传送本地文件到ftp中</span></span><br><span class="line">Echo <span class="built_in">cd</span> ..\project3&gt;&gt;ftp.up <span class="comment">#进入根目录下的project3目录</span></span><br><span class="line">Echo put <span class="string">"E:\Workspace\idea\jcnyJava\target\jcny-java-0.0.1-SNAPSHOT.jar.original"</span>&gt;&gt;ftp.up <span class="comment">#传送本地文件到ftp中</span></span><br><span class="line">Echo <span class="built_in">bye</span>&gt;&gt;ftp.up <span class="comment">#客户端关闭ftp连接</span></span><br><span class="line">FTP -s:ftp.up <span class="comment">#服务器关闭ftp连接</span></span><br><span class="line">del ftp.up /q <span class="comment">#删除ftp连接</span></span><br><span class="line">Pause</span><br></pre></td></tr></table></figure></p><h2 id="powershell启动远程服务命令"><a href="#powershell启动远程服务命令" class="headerlink" title="powershell启动远程服务命令"></a>powershell启动远程服务命令</h2><p>新建一个启动脚本<strong>deploy.ps1</strong><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$na</span> = <span class="string">"yourname"</span>  <span class="comment">#服务器用户名</span></span><br><span class="line">                                                                       </span><br><span class="line"><span class="variable">$p2</span> = <span class="built_in">ConvertTo-SecureString</span> <span class="string">"yourpassword"</span> -AsPlainText -Force   <span class="comment">#加密登录密码                                    </span></span><br><span class="line"><span class="variable">$A</span> = <span class="built_in">New-Object</span> System.Management.Automation.PSCredential(<span class="variable">$na</span>,<span class="variable">$p2</span>) <span class="comment">#创建连接</span></span><br><span class="line"><span class="built_in">Invoke-Command</span> -ComputerName <span class="number">192.168</span>.<span class="number">1.44</span> -Credential <span class="variable">$A</span> -ScriptBlock &#123;  <span class="comment">#执行远程操作</span></span><br><span class="line"><span class="built_in">Set-Location</span> E:\webroot\projects   <span class="comment">#进入远程服务器目录</span></span><br><span class="line"><span class="built_in">invoke-expression</span> -command E:\webroot\tongtu-projects\startall.bat  <span class="comment">#远程服务启动的脚本路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>以上命令都是针对Windows系统的，Linux系统应该是写bash脚本吧。<br>如果下次主管说要一键启动远程Linux上的服务的话，到时候我再写篇linux的吧。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="后端笔记" scheme="https://fatboa.co/categories/%E5%90%8E%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="powershell" scheme="https://fatboa.co/tags/powershell/"/>
    
  </entry>
  
  <entry>
    <title>Python虚拟环境搭建</title>
    <link href="https://fatboa.co/2018/07/26/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://fatboa.co/2018/07/26/Python虚拟环境搭建/</id>
    <published>2018-07-26T06:36:54.000Z</published>
    <updated>2019-05-10T10:53:39.738Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>    <div id="aplayer-hZsxFMip" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><hr><blockquote><p>个人笔记，如有描述不当，欢迎留言指出~</p></blockquote><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>搭建 Python 虚拟环境，可以方便地Python2，Python3 共存。避免包的混乱和版本的冲突。为每个应用程序单独创建虚拟环境可以保证程序中能访问虚拟环境中的包，保持解释器环境的干净整洁。<a href="https://virtualenv.pypa.io/en/stable/" target="_blank" rel="noopener"><strong>virtualenv</strong></a>就是用来为一个应用创建一套“隔离”的Python运行环境。</p><h2 id="我的开发环境"><a href="#我的开发环境" class="headerlink" title="我的开发环境"></a>我的开发环境</h2><ul><li>windows 10</li><li>python2.7</li><li>python3.5</li></ul><h2 id="安装使用-virtualenv"><a href="#安装使用-virtualenv" class="headerlink" title="安装使用 virtualenv"></a>安装使用 virtualenv</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为我装了python2.7、3.5，所以也就有了两个pip包管理工具，默认会使用高版本python的pip，but也可以指定s使用哪个Python版本的pip，如pip2指定使用Python2.7的pip。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install virtualenv</span><br></pre></td></tr></table></figure><h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd your_project_dir <span class="comment">#进入你的工程目录</span></span><br><span class="line">virtualenv  env1 -p G:\Environment\Python\Python27 --no-site-packages</span><br></pre></td></tr></table></figure><ul><li>env1：虚拟环境目录名</li><li>-p：指定Python安装路径</li><li>–no-site-packages： 不复制系统Python环境中的所有第三方包</li></ul><p>这样我们就得到了一个不带任何第三方包的“干净”的Python2.7运行环境。</p><h3 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h3><pre><code>cd env1 #进入虚拟环境cd Scirpts #进入脚本目录activate #激活虚拟环境deactivate #退出虚拟环境</code></pre><p>截图如下：<br><img src="http://fatboa.gz.bcebos.com/img/posts/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/qqjie.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-08-06T06%3A40%3A46Z%2F-1%2Fhost%2F5a26fc2ac006e3a01dd0cedf8c4c6d3dd2f63bacf25ca5a2555ce628bfece3ae" alt="Alt text"></p><p>当执行activate时，注意命令提示符变了，有个(env1)前缀，表示当前环境是一个名为env1的Python环境。</p><p>虽然virtualenv很强大，但仍有不足。你想，要是以后创建的虚拟环境多了，它们分散在系统各处，时间一长，你可能忘记它们的名字或者位置。所以下面介绍<strong>virtualenvwrapper</strong>。</p><h2 id="安装使用-virtualenvwrapper"><a href="#安装使用-virtualenvwrapper" class="headerlink" title="安装使用 virtualenvwrapper"></a>安装使用 virtualenvwrapper</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><a href="https://pypi.org/project/virtualenvwrapper/" target="_blank" rel="noopener">virtualenvwrapper</a> 是对 virtualenv 的功能扩展，可以管理全部的虚拟环境，用单个命令方便切换不同的虚拟环境。</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><pre><code>pip install virtualenvwrapper-win </code></pre><h3 id="设置workon-home环境变量"><a href="#设置workon-home环境变量" class="headerlink" title="设置workon_home环境变量"></a>设置workon_home环境变量</h3><p><img src="http://fatboa.gz.bcebos.com/img/posts/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/dada.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-08-06T06%3A40%3A17Z%2F-1%2Fhost%2Fe8a3a2fea4421981f05e1a7fed3014a711b75c90eea0b139a2275387791496bb" alt="Alt text"></p><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="新建虚拟环境"><a href="#新建虚拟环境" class="headerlink" title="新建虚拟环境"></a>新建虚拟环境</h4><p>如果不指定Python解释器程序路径，则会默认使用系统里高版本Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv env2</span><br></pre></td></tr></table></figure></p><p>mkvirtualenv –python=(pytho执行路径) (虚拟环境名字)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv --python=G:\Environment\Python\Python27\python.exe mypython27</span><br></pre></td></tr></table></figure></p><h4 id="查看安装的所有虚拟环境"><a href="#查看安装的所有虚拟环境" class="headerlink" title="查看安装的所有虚拟环境"></a>查看安装的所有虚拟环境</h4><pre><code>workon</code></pre><p><img src="http://fatboa.gz.bcebos.com/img/posts/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/2131.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-08-06T06%3A39%3A19Z%2F-1%2Fhost%2F5e58ea9fdf62716fd41874b096621670f38346331544724ff8520257d6e5381b" alt="Alt text"></p><h4 id="进入和退出虚拟环境"><a href="#进入和退出虚拟环境" class="headerlink" title="进入和退出虚拟环境"></a>进入和退出虚拟环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">workon mypython27</span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure><p><img src="http://fatboa.gz.bcebos.com/img/posts/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/dffaas.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-08-06T06%3A39%3A45Z%2F-1%2Fhost%2Fef8eacfa1e363e3a6389d2cdb88994aa7b6550bce9ec1822eccfa83ab978ddfa" alt="Alt text"></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv -h <span class="comment">#更多命令大家自己探索吧</span></span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>创建python虚拟环境的技术不只有<strong>virtualenv</strong>，现在最新的是<a href="https://github.com/pyenv/pyenv#installation" target="_blank" rel="noopener">pyenv</a>技术，这也是官方推荐使用的，后期有时间再专门写篇吧<br>另外 <a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">pycham</a>这个IDE自带了Python虚拟环境创建功能，jetbrains系列就是<img src="http://fatboa.gz.bcebos.com/img/posts/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/1533438067653.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-08-06T06%3A38%3A28Z%2F-1%2Fhost%2Fde4d612e94d6c617efacaa99a37d9f4c9e4567f94c1637392c2849726b8395b1" alt="Alt text"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="环境安装篇" scheme="https://fatboa.co/categories/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E7%AF%87/"/>
    
    
      <category term="python" scheme="https://fatboa.co/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>二叉查找树之C++实现</title>
    <link href="https://fatboa.co/2018/07/20/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E4%B9%8BC-%E5%AE%9E%E7%8E%B0/"/>
    <id>https://fatboa.co/2018/07/20/二叉查找树之C-实现/</id>
    <published>2018-07-20T13:53:56.000Z</published>
    <updated>2019-05-10T10:53:39.737Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>    <div id="aplayer-OBWZAYoX" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><hr><blockquote><p>个人笔记，如有描述不当，欢迎留言指出~<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">BSTreeNode</span>&#123;</span></span><br><span class="line">T key;</span><br><span class="line">BSTreeNode *left;</span><br><span class="line">BSTreeNode *right;</span><br><span class="line">BSTreeNode *parent;</span><br><span class="line">BSTreeNode(T k )&#123;</span><br><span class="line">key=k;</span><br><span class="line">left=<span class="literal">NULL</span>;</span><br><span class="line">right=<span class="literal">NULL</span>;</span><br><span class="line">parent=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">BSTreeNode()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//错误信息</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">ErrorMessage</span>&#123;</span></span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="built_in">string</span> message;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//生成节点并插入树中</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">ErrorMessage</span> <span class="title">insert</span>(<span class="title">BSTreeNode</span>&lt;T&gt;* &amp;<span class="title">root</span>,<span class="title">T</span> <span class="title">key</span>)&#123;</span></span><br><span class="line">BSTreeNode&lt;T&gt;* node=<span class="literal">NULL</span>;</span><br><span class="line">ErrorMessage error;</span><br><span class="line"><span class="built_in">stringstream</span>  s;</span><br><span class="line"><span class="keyword">if</span> ((node=<span class="keyword">new</span> BSTreeNode&lt;T&gt;(key)) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">s&lt;&lt;<span class="string">"值"</span>&lt;&lt;key&lt;&lt;<span class="string">"分配节点内存失败"</span>;</span><br><span class="line">error.flag=<span class="literal">false</span>;</span><br><span class="line">error.message= s.str();</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line">BSTreeNode&lt;T&gt;* x= root;</span><br><span class="line">BSTreeNode&lt;T&gt;* y= <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (x !=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">y=x;</span><br><span class="line"><span class="keyword">if</span> (node-&gt;key&lt;x-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">x=x-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(node-&gt;key&gt;x-&gt;key)&#123;</span><br><span class="line">x=x-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">s&lt;&lt;<span class="string">"值"</span>&lt;&lt;key&lt;&lt;<span class="string">"重复,创建节点失败"</span>;</span><br><span class="line">error.flag=<span class="literal">false</span>;</span><br><span class="line">error.message=s.str();</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">node-&gt;parent=y;</span><br><span class="line"><span class="keyword">if</span> (y==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">root = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(node-&gt;key&lt;y-&gt;key)&#123;</span><br><span class="line">y-&gt;left=node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">y-&gt;right=node;</span><br><span class="line">&#125;</span><br><span class="line">s&lt;&lt;<span class="string">"值"</span>&lt;&lt;key&lt;&lt;<span class="string">"创建节点成功"</span>;</span><br><span class="line">error.flag=<span class="literal">true</span>;</span><br><span class="line">error.message=s.str();</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">preShow</span>(<span class="title">BSTreeNode</span>&lt;T&gt;* <span class="title">node</span>)&#123;</span></span><br><span class="line"><span class="keyword">if</span> (node != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;node-&gt;key&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">preShow(node-&gt;left);</span><br><span class="line">preShow(node-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">midShow</span>(<span class="title">BSTreeNode</span>&lt;T&gt;* <span class="title">node</span>)&#123;</span></span><br><span class="line"><span class="keyword">if</span> (node !=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">midShow(node-&gt;left);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;node-&gt;key&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">midShow(node-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">postShow</span>(<span class="title">BSTreeNode</span>&lt;T&gt;* <span class="title">node</span>)&#123;</span></span><br><span class="line"><span class="keyword">if</span> (node != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;node-&gt;key&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">postShow(node-&gt;left);</span><br><span class="line">postShow(node-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找节点树下包含key的节点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">BSTreeNode</span>&lt;T&gt;* <span class="title">search</span>(<span class="title">BSTreeNode</span>&lt;T&gt;* <span class="title">node</span>,<span class="title">T</span> <span class="title">key</span>)&#123;</span></span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span> || node-&gt;key == key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (node-&gt;key&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">search(node-&gt;left,key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;key&lt;key)</span><br><span class="line">&#123;</span><br><span class="line">search(node-&gt;right,key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回节点树中最大值的节点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">BSTreeNode</span>&lt;T&gt;* <span class="title">maxNode</span>(<span class="title">BSTreeNode</span>&lt;T&gt;* <span class="title">node</span>)&#123;</span></span><br><span class="line"><span class="keyword">if</span> (node==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (node-&gt;right==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">maxNode(node-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回节点树中最小值的节点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">BSTreeNode</span>&lt;T&gt;* <span class="title">minNode</span>(<span class="title">BSTreeNode</span>&lt;T&gt;* <span class="title">node</span>)&#123;</span></span><br><span class="line"><span class="keyword">if</span> (node==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (node-&gt;left==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">minNode(node-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回传入节点的后继节点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">BSTreeNode</span>&lt;T&gt;* <span class="title">successor</span>(<span class="title">BSTreeNode</span>&lt;T&gt;* <span class="title">node</span>)&#123;</span></span><br><span class="line"><span class="keyword">if</span>(node == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (node-&gt;right!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> minNode(node-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">BSTreeNode&lt;T&gt;* parent=node-&gt;parent;</span><br><span class="line">BSTreeNode&lt;T&gt;* child=node;</span><br><span class="line"><span class="keyword">while</span>(parent!=<span class="literal">NULL</span>&amp;&amp;parent-&gt;left!=child)&#123;</span><br><span class="line">child=parent;</span><br><span class="line">parent=parent-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回传入节点的前驱节点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">BSTreeNode</span>&lt;T&gt;* <span class="title">predecessor</span>(<span class="title">BSTreeNode</span>&lt;T&gt;* <span class="title">node</span>)&#123;</span></span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (node-&gt;left!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> maxNode(node-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line">BSTreeNode&lt;T&gt;* parent=node-&gt;parent;</span><br><span class="line">BSTreeNode&lt;T&gt;* child=node;</span><br><span class="line"><span class="keyword">while</span>(parent!=<span class="literal">NULL</span>&amp;&amp;parent-&gt;right!=child)&#123;</span><br><span class="line">child=parent;</span><br><span class="line">parent=parent-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">delete_node</span>(<span class="title">BSTreeNode</span>&lt;T&gt;* &amp;<span class="title">root</span>, <span class="title">BSTreeNode</span>&lt;T&gt;* <span class="title">node</span>)&#123;</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;left==<span class="literal">NULL</span>&amp;&amp;node-&gt;right==<span class="literal">NULL</span>) <span class="comment">//叶子节点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (node == root)</span><br><span class="line">&#123;</span><br><span class="line">root=<span class="literal">NULL</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isLeft(node))</span><br><span class="line">&#123;</span><br><span class="line">node-&gt;parent-&gt;left=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">node-&gt;parent-&gt;right=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;left==<span class="literal">NULL</span>) <span class="comment">//只有右子节点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (node == root) <span class="comment">//节点是根节点</span></span><br><span class="line">&#123;</span><br><span class="line">root=node-&gt;right;</span><br><span class="line">node-&gt;right-&gt;parent=<span class="literal">NULL</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isLeft(node)) <span class="comment">//节点是左节点</span></span><br><span class="line">&#123;</span><br><span class="line">node-&gt;parent-&gt;left=node-&gt;right;</span><br><span class="line">node-&gt;right-&gt;parent=node-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="comment">//节点是右节点</span></span><br><span class="line">node-&gt;parent-&gt;right=node-&gt;right;</span><br><span class="line">node-&gt;right-&gt;parent=node-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;right==<span class="literal">NULL</span>) <span class="comment">//只有左节点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (node == root) <span class="comment">//节点是根节点</span></span><br><span class="line">&#123;</span><br><span class="line">root=node-&gt;left;</span><br><span class="line">node-&gt;left-&gt;parent=<span class="literal">NULL</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isLeft(node)) <span class="comment">//节点是左节点</span></span><br><span class="line">&#123;</span><br><span class="line">node-&gt;parent-&gt;left=node-&gt;left;</span><br><span class="line">node-&gt;left-&gt;parent=node-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="comment">//节点是右节点</span></span><br><span class="line">node-&gt;parent-&gt;right=node-&gt;left;</span><br><span class="line">node-&gt;left-&gt;parent=node-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="comment">//左右节点都有</span></span><br><span class="line">&#123;</span><br><span class="line">BSTreeNode&lt;T&gt;* suc= successor(node); <span class="comment">//node 的后继节点</span></span><br><span class="line"><span class="keyword">if</span> (suc == node-&gt;right) <span class="comment">//后继节点为右子节点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (node == root)<span class="comment">// 删除节点为根节点</span></span><br><span class="line">&#123;</span><br><span class="line">root=suc;</span><br><span class="line">suc-&gt;left=node-&gt;left;</span><br><span class="line">node-&gt;left-&gt;parent=suc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">// 删除节点不为根节点</span></span><br><span class="line"><span class="keyword">if</span> (isLeft(node)) <span class="comment">//删除节点为左节点</span></span><br><span class="line">&#123; </span><br><span class="line">node-&gt;parent-&gt;left= suc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="comment">// 删除节点为右节点</span></span><br><span class="line">node-&gt;parent-&gt;right=suc;</span><br><span class="line">&#125;</span><br><span class="line">suc-&gt;parent=node-&gt;parent;</span><br><span class="line">suc-&gt;left=node-&gt;left;</span><br><span class="line">node-&gt;left-&gt;parent=suc;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//后继节点不为右子节点</span></span><br><span class="line">&#123; </span><br><span class="line">suc-&gt;parent-&gt;left=suc-&gt;right;</span><br><span class="line"><span class="keyword">if</span> (suc-&gt;right!=<span class="literal">NULL</span>) <span class="comment">// 后继节点的右节点不空</span></span><br><span class="line">&#123;</span><br><span class="line">suc-&gt;right-&gt;parent= suc-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line">suc-&gt;left =node-&gt;left;</span><br><span class="line">node-&gt;left-&gt;parent =suc;</span><br><span class="line">suc-&gt;right=node-&gt;right;</span><br><span class="line">node-&gt;right-&gt;parent =suc;</span><br><span class="line">suc-&gt;parent=node-&gt;parent;</span><br><span class="line"><span class="keyword">if</span> (node==root)</span><br><span class="line">&#123;</span><br><span class="line">root=suc;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> node;</span><br><span class="line">node=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">deleteByKey</span>(<span class="title">BSTreeNode</span>&lt;T&gt;* &amp;<span class="title">root</span>, <span class="title">T</span> <span class="title">key</span>)&#123;</span></span><br><span class="line">BSTreeNode&lt;T&gt;* node= search(root,key);</span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">delete_node(root,node);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断是否为左节点</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">isLeft</span>(<span class="title">BSTreeNode</span>&lt;T&gt;* <span class="title">node</span>)&#123;</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;parent!=<span class="literal">NULL</span>&amp;&amp;node-&gt;parent-&gt;left==node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">BSTreeNode&lt;<span class="keyword">int</span>&gt;* root=<span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;insert(root,<span class="number">5</span>).message&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;insert(root,<span class="number">3</span>).message&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;insert(root,<span class="number">1</span>).message&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;insert(root,<span class="number">2</span>).message&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"前序"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">preShow(root);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"中序"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">midShow(root);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"后序"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">postShow(root);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (search(root,<span class="number">4</span>) != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"存在"</span>&lt;&lt;<span class="number">4</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"不存在"</span>&lt;&lt;<span class="number">4</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"最大值:"</span>&lt;&lt;maxNode(root)-&gt;key&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"最小值:"</span>&lt;&lt;minNode(root)-&gt;key&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"3的后继:"</span>&lt;&lt;successor(search(root,<span class="number">3</span>))-&gt;key&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"3的前驱:"</span>&lt;&lt;predecessor(search(root,<span class="number">3</span>))-&gt;key&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (deleteByKey(root,<span class="number">5</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"5删除成功"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"5删除成功"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"中序"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">midShow(root);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法篇" scheme="https://fatboa.co/categories/%E7%AE%97%E6%B3%95%E7%AF%87/"/>
    
    
      <category term="c++" scheme="https://fatboa.co/tags/c/"/>
    
      <category term="数据结构" scheme="https://fatboa.co/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>npm 升级失败解决方案</title>
    <link href="https://fatboa.co/2018/07/14/npm-%E5%8D%87%E7%BA%A7%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://fatboa.co/2018/07/14/npm-升级失败解决方案/</id>
    <published>2018-07-14T04:44:37.000Z</published>
    <updated>2019-05-10T10:53:39.736Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>    <div id="aplayer-ZjcbOqYr" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><hr><blockquote><p>个人笔记，如有描述不当，欢迎留言指出~</p></blockquote><h2 id="说一下我的开发环境："><a href="#说一下我的开发环境：" class="headerlink" title="说一下我的开发环境："></a>说一下我的开发环境：</h2><ul><li>Windows 10 </li><li>node 8.10.0</li><li>nvm 1.1.6</li></ul><p>npm这个东东其实也不会经常去升级它，但因为要安装angular cli,提示我npm版本低了得升级，这才去升级，哪晓得一个简单npm升级居然就炸了。</p><h2 id="error"><a href="#error" class="headerlink" title="error:"></a>error:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ERR! path C:\Program Files\nodejs\npm.cmd npm ERR! code EEXIST npm ERR! Refusing to delete C:\Program Files\nodejs\npm.cmd: is outside C:\Program Files\nodejs\node_modules\npm and not a link npm ERR! File exists: C:\Program Files\nodejs\npm.cmd npm ERR! Move it away, and try again.</span><br></pre></td></tr></table></figure><p>提示我移除C:\Program Files\nodejs\npm.cmd这个文件，可这个文件不是npm的命令文件吗，把这移除了，那我命令行里敲npm xxx什么的不都执行不了吗？算了，先按提示来吗，我移除了npm.cmd，嗯，这下好了，npm -v 都报错了。</p><p>百度了半天也没找到类似的错误，最后没办法，只好使出那一招了，大科学上网术！（翻墙谷歌）<img src="http://fatboa.gz.bcebos.com/img/posts/npm%E5%8D%87%E7%BA%A7%E5%A4%B1%E8%B4%A5/0AEBCAF6.jpg?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-08-06T06%3A33%3A29Z%2F-1%2Fhost%2Fd3da2671777826752cd65bb645b8a44ae4fce1614976e9f11cc7a627859abd8e" alt="|100*0"></p><p>很快就找到类似的错误了，给我激动的哇  <a href="https://github.com/coreybutler/nvm-windows/issues/300" target="_blank" rel="noopener">issues</a></p><p>至于为啥会报这种错，我琢磨着可能是因为我从npm5.x.x升级到6.x.x，跨了一个大版本的原因吧，后来从npm6.1.0正常升到6.3.0就没报错了</p><h2 id="解决方案如下："><a href="#解决方案如下：" class="headerlink" title="解决方案如下："></a>解决方案如下：</h2><ul><li>首先将你nodejs安装目录下的 node_modules/npm文件夹  复制到任意路径下</li><li>再将nodejs安装目录下的npm.bin、npm.cmd删了</li><li>最后进入第一步复制的xxx/npm/bin目录下，执行node npm-cli.js i -g npm@latest 命令，欧了！</li></ul><p>我是真滴佩服想出这个办法的仁兄，高，太高了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="问题总结篇" scheme="https://fatboa.co/categories/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%E7%AF%87/"/>
    
    
      <category term="nodejs" scheme="https://fatboa.co/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>windows下安装nvm及nrm</title>
    <link href="https://fatboa.co/2018/07/12/windows%E4%B8%8B%E5%AE%89%E8%A3%85nvm%E5%8F%8Anrm/"/>
    <id>https://fatboa.co/2018/07/12/windows下安装nvm及nrm/</id>
    <published>2018-07-12T01:14:12.000Z</published>
    <updated>2019-05-10T10:53:39.736Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>    <div id="aplayer-ZSeAwXqq" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><hr><blockquote><p>个人笔记，如有描述不当，欢迎留言指出~</p></blockquote><h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><h3 id="nvm是什么以及应用场景"><a href="#nvm是什么以及应用场景" class="headerlink" title="nvm是什么以及应用场景"></a>nvm是什么以及应用场景</h3><p>基于node的项目对node版本依赖是不同的，而电脑上只安装了一个node的版本，那显然是不够的。所以nvm（Node Version Manager），一个node版本管理工具就诞生了。它就就像是一个开关，切换系统里不同的node版本，切记同一时刻有且只有一个node版本生效，node8和node10不能同时存在。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>如果你已经装了node了，建议完全卸载了（连同npm，还有环境变量）,如果不卸载的话可能会和nvm发生冲突 <a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">下载地址</a>  </p><p>它有两个版本 <strong>nvm-noinstall.zip</strong>(免安装) 、<strong>nvm-setup.zip</strong>(图形界面安装GUI)，它们两个区别只在于免安装需要自己手动配置环境变量而GUI版给你自动配好了，下面基于GUI版简单说明一下：</p><p>当你安装到这一步时，选择nvm的安装目录，我这里是：D:\Environment\nvm</p><p><img src="http://fatboa.gz.bcebos.com/img/posts/nvm%E5%AE%89%E8%A3%85/1533348466236.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-08-06T06%3A34%3A36Z%2F-1%2Fhost%2F8eaba57f15a93f0ab5634d7cc20a9f5dbdc4b36bbb4fd6159dfee41aae896b5b" alt="1533348466236"></p><p>这一步是设置创建一个链接目录指向真正的node的安装目录，我这里是：D:\Environment\nodejs</p><p><img src="http://fatboa.gz.bcebos.com/img/posts/nvm%E5%AE%89%E8%A3%85/1533348746705.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-08-06T06%3A35%3A04Z%2F-1%2Fhost%2Fb314b8708c08276f6ad7cadadd1c59a3a642654773cb297506cb42fb3ff1990f" alt="1533348746705"></p><p>一直next直到安装完成，期间的所有环境变量都会自动加入系统路径中（方便！）</p><h3 id="配置settings-txt"><a href="#配置settings-txt" class="headerlink" title="配置settings.txt"></a>配置settings.txt</h3><ul><li><p>如果你是免安装，有两种方法</p><ol><li><p>我们打开免安装目录下的install.cmd文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set /P NVM_PATH=&quot;Enter the absolute path where the zip file is extracted/copied to: &quot; #输入nvm安装目录路径</span><br><span class="line">setx /M NVM_HOME &quot;%NVM_PATH%&quot; #将你输入的路径赋给NVM_HOME环境变量</span><br><span class="line">setx /M NVM_SYMLINK &quot;C:\Program Files\nodejs&quot; #默认路径赋给NVM_SYMLINK变量，可以将默认路径修改成任意路径</span><br><span class="line">setx /M PATH &quot;%PATH%;%NVM_HOME%;%NVM_SYMLINK%&quot; #将NVM_HOME、NVM_SYMLINK将入PATH中</span><br><span class="line"></span><br><span class="line">if exist &quot;%SYSTEMDRIVE%\Program Files (x86)\&quot; (</span><br><span class="line">set SYS_ARCH=64</span><br><span class="line">) else (</span><br><span class="line">set SYS_ARCH=32</span><br><span class="line">)</span><br><span class="line">(echo root: %NVM_HOME% &amp;&amp; echo path: %NVM_SYMLINK% &amp;&amp; echo arch: %SYS_ARCH% &amp;&amp; echo proxy: none) &gt; %NVM_HOME%\settings.txt #在nvm目录下生成settings.txt</span><br><span class="line"></span><br><span class="line">notepad %NVM_HOME%\settings.txt</span><br><span class="line">@echo on</span><br></pre></td></tr></table></figure><p>简单点说，install.cmd的作用就是帮你自动配置环境变量并生成settings.txt。</p></li><li><p>当然你也可以不用install.cmd，自己手动创建settings.txt，手动配置环境变量，毕竟自己动手，丰衣足食<img src="http://fatboa.gz.bcebos.com/img/posts/nvm%E5%AE%89%E8%A3%85/0A808D0B.jpg?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-08-06T06%3A35%3A38Z%2F-1%2Fhost%2F3b8cd5cf0974eeeb5a8e70e80aa09c1adfe86320fe3b03ad381e5dcb2bdd6a6e" alt="img"></p></li></ol></li><li><p>如果你是GUI安装，直接打开nvm安装目录下的settings.txt ，修改如下：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root: D:\Environment\nvm  //改成你的nvm安装目录</span><br><span class="line">path: D:\Environment\nodejs //改成你的nvm安装目录</span><br><span class="line">arch: 64 //你的系统指令架构64位，默认的不必修改</span><br><span class="line">proxy: none //代理配置，无</span><br><span class="line">node_mirror: http://npm.taobao.org/mirrors/node/  //node镜像源</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/   //npm镜像源</span><br></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ul><li><p>如果你是通过GUI安装的，那么你的环境变量已经自动配好了，你可以跳过这一步，也可以跟着看下去，看看自动配置是否有误</p></li><li><p>如果你是免安装又不想用install.cmd的话，建议在个人环境变量中加入下面的参数，因为这样不会扰乱系到统环境变量 ，快捷打开环境变量界面：windows+r =&gt; sysdm.cpl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NVM_HOME： D:\Environment\nvm  //改成你的nvm安装目录</span><br><span class="line">NVM_SYMLINK ：  D:\Environment\nodejs //改成你的nodejs链接目录</span><br></pre></td></tr></table></figure><p>最后别忘了，在PATH里加上 <strong>;%NVM_HOME%;%NVM_SYMLINK%;</strong> </p></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>打开控制台，输入：nvm version,若是出现版本信息，则安装成功。若报错，那就面壁思过，我讲的辣么详细。</p><p>这里介绍一些常用命令，剩下自己探索吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nvm install &lt;version&gt; [arch] ：version是版本号、arch是系统位数，默认64位，比如：nvm install 8.10.0  安装64位的nodejs8.10.0</span><br><span class="line">nvm uninstall &lt;version&gt; ：删除对应node版本</span><br><span class="line">nvm list ：会显示你系统中安装的所有node版本，并标明当前应用的那个node版本</span><br><span class="line">nvm use [version] [arch] ：选择生效哪个node版本</span><br></pre></td></tr></table></figure><h2 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h2><h3 id="nrm是什么及应用场景"><a href="#nrm是什么及应用场景" class="headerlink" title="nrm是什么及应用场景"></a>nrm是什么及应用场景</h3><p>nrm（npm registry manager ），npm 镜像源管理工具。有时候访问国外资源太慢了，我们就得更换npm的源，命令是npm config set registry xxxxxxxx,考虑到有的公司还有私有源，如果每次更改源都要敲那么长的命令，那效率太低了。but nrm替我们管理了这些源，我们只需要简单的切换一下！</p><h3 id="安装及使用"><a href="#安装及使用" class="headerlink" title="安装及使用"></a>安装及使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm      直接使用npm全局安装即可</span><br><span class="line">nrm --help</span><br><span class="line">Usage: nrm [options] [command]</span><br><span class="line">Commands:</span><br><span class="line">ls                           列出所有的源</span><br><span class="line">current                      显示当前源的名称</span><br><span class="line">use &lt;registry&gt;               切换源</span><br><span class="line">add &lt;registry&gt; &lt;url&gt; [home]  添加源</span><br><span class="line">del|rm &lt;registry&gt;            删除原</span><br><span class="line">home &lt;registry&gt; [browser]    打开源的官方主页</span><br><span class="line">test [registry]              测试下这些源的响应时间</span><br><span class="line">help                         print this help</span><br><span class="line">Options:</span><br><span class="line">-h, --help     output usage information</span><br><span class="line">-V, --version  output the version number</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="环境安装篇" scheme="https://fatboa.co/categories/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E7%AF%87/"/>
    
    
      <category term="nodejs" scheme="https://fatboa.co/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>springboot多数据源配置</title>
    <link href="https://fatboa.co/2018/07/06/springboot%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/"/>
    <id>https://fatboa.co/2018/07/06/springboot多数据源配置/</id>
    <published>2018-07-06T06:28:48.000Z</published>
    <updated>2019-05-10T10:53:39.735Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>    <div id="aplayer-yoZWWNiR" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><hr><blockquote><p>个人笔记，如有描述不当，欢迎留言指出~</p></blockquote><h3 id="项目结构图"><a href="#项目结构图" class="headerlink" title="项目结构图"></a>项目结构图</h3><p><img src="http://fatboa.gz.bcebos.com/img/posts/springboot%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/projectmulu1.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-09-09T14%3A30%3A26Z%2F-1%2Fhost%2F4e772e91500e74dd4eb1c25bbeb699223eda7906464fb2b659163999d1956d09" alt="@图1" title="图一"><br><img src="http://fatboa.gz.bcebos.com/img/posts/springboot%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/projectmulu2.png?authorization=bce-auth-v1%2Fb6f23434344c421e8a830ea644d98122%2F2018-09-09T14%3A31%3A02Z%2F-1%2Fhost%2Fe21e4a3f01b5301fcd4161d5381e989bd9372c8b8a8c6cb280e6546b7ed3dd26" alt="@图2" title="图二"></p><h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h3><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mymultidata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ahuang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>ahuang<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- lookup parent from repository --&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h4><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#主数据源</span><br><span class="line">spring.datasource.primary.url=jdbc:mysql://localhost:<span class="number">3306</span>/test1?useUnicode=true&amp;characterEncoding=utf<span class="number">-8</span>&amp;serverTimezone=UTC&amp;useSSL=true</span><br><span class="line">spring.datasource.primary.username=root</span><br><span class="line">spring.datasource.primary.password=xxxxxx</span><br><span class="line">spring.datasource.primary.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.max-active=10</span><br><span class="line">spring.datasource.primary.max-idle=5</span><br><span class="line">spring.datasource.primary.min-idle=0</span><br><span class="line">#次数据源</span><br><span class="line">spring.datasource.secondary.url=jdbc:mysql://localhost:<span class="number">3306</span>/test2?useUnicode=true&amp;characterEncoding=utf<span class="number">-8</span>&amp;serverTimezone=UTC&amp;useSSL=true</span><br><span class="line">spring.datasource.secondary.username=root</span><br><span class="line">spring.datasource.secondary.password=xxxxxx</span><br><span class="line">spring.datasource.secondary.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.secondary.max-active=10</span><br><span class="line">spring.datasource.secondary.max-idle=5</span><br><span class="line">spring.datasource.secondary.min-idle=0</span><br><span class="line">#tomcat</span><br><span class="line">server.port=8082</span><br><span class="line">#hibernate配置</span><br><span class="line">spring.jpa.properties.hibernate.hbm2ddl.auto=update</span><br><span class="line">spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect</span><br><span class="line">spring.jpa.show-sql= true</span><br><span class="line">#mybatis配置</span><br><span class="line">mybatis.config-locations=classpath:mybatis/config.xml</span><br><span class="line">mybatis.mapper-locations=classpath:mybatis/mapper/*/*/*.xml</span><br></pre></td></tr></table></figure><p><code>spring.datasource.primary.xxx</code>、<code>spring.datasource.secondary.xxx</code>并非springboot的默认参数，这些配置并不能生效，所以要自己定义下数据源配置类。<br>还记得config目录下DataSourceConfig.java这个类吗？这个类就是用来配置多个数据源的。</p><h4 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h4><p><strong>DataSourceConfig.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mymultidata.ahuang.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: hl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 13:55 2018/4/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"primaryDataSource"</span>)</span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"primaryDataSource"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.primary"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">primaryDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"secondaryDataSource"</span>)</span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"secondaryDataSource"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.secondary"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">secondaryDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p> <code>@ConfigurationProperties(prefix = &quot;spring.datasource.primary&quot;)</code>：找到application.properties里前缀为spring.datasource.primary的参数并自动注入值到DataSource中。我这里是准备将primary数据源集成jpa，secondary数据源集成mybaitis,这里只配了两个数据源，同学们可以举一反三，third,fourth…</p></blockquote><h4 id="数据源事务配置"><a href="#数据源事务配置" class="headerlink" title="数据源事务配置"></a>数据源事务配置</h4><h5 id="基于jpa"><a href="#基于jpa" class="headerlink" title="基于jpa"></a>基于jpa</h5><p><strong>PrimaryConfig.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.mymultidata.ahuang.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: hl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 14:23 2018/4/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="comment">//entityManagerFactoryRef:引用实体管理工厂</span></span><br><span class="line"><span class="comment">// transactionManagerRef:引用事务管理工厂</span></span><br><span class="line"><span class="comment">// basePackages:设置jpa的repository接口类的包路径,可配置多个</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(</span><br><span class="line">        entityManagerFactoryRef = <span class="string">"entityManagerFactoryPrimary"</span>,</span><br><span class="line">        transactionManagerRef = <span class="string">"transactionManagerPrimary"</span>,</span><br><span class="line">        basePackages = &#123;<span class="string">"com.mymultidata.ahuang.repository.jpa.jpa1"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimaryConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"primaryDataSource"</span>)</span><br><span class="line">    <span class="keyword">private</span> DataSource primaryDataSource;<span class="comment">//注入primary数据源</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> JpaProperties jpaProperties;<span class="comment">//注入jpa全局参数</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerPrimary"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EntityManager <span class="title">entityManager</span><span class="params">(EntityManagerFactoryBuilder builder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entityManagerFactoryPrimary(builder).getObject().createEntityManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerFactoryPrimary"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactoryPrimary</span> <span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder</span><br><span class="line">                .dataSource(primaryDataSource)</span><br><span class="line">                .properties(getVendorProperties(primaryDataSource))</span><br><span class="line">                .packages(<span class="string">"com.mymultidata.ahuang.domain.jpa.jpa1"</span>) <span class="comment">//设置实体类所在位置</span></span><br><span class="line">                .persistenceUnit(<span class="string">"primaryPersistenceUnit"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">getVendorProperties</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jpaProperties.getHibernateProperties(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManagerPrimary"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManagerPrimary</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(entityManagerFactoryPrimary(builder).getObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="基于mybatis"><a href="#基于mybatis" class="headerlink" title="基于mybatis"></a>基于mybatis</h5><p>SecondaryConfig.java:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mymultidata.ahuang.config;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: hl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 15:05 2018/4/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//basePackages:设置mapperj接口类所在位置</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = &#123;<span class="string">"com.mymultidata.ahuang.repository.mybatis.mapper1"</span>&#125;,sqlSessionTemplateRef =<span class="string">"secondarySqlSessionTemplate"</span> )</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">secondaryConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"secondaryDataSource"</span>)</span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"secondarySqlSessionFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">testSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        bean.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="string">"classpath:mybatis/mapper/mapper1/*/*.xml"</span>));<span class="comment">//设置mapper.xml路径,路径中之所以加了'*'号，是为了项目的功能划分,方便分析,如果你的映射文件不做功能划分的话，可以改为"classpath:mybatis/mapper/mapper1/*.xml"</span></span><br><span class="line">        <span class="keyword">return</span> bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"secondaryTransactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">testTransactionManager</span><span class="params">(@Qualifier(<span class="string">"secondaryDataSource"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"secondarySqlSessionTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">testSqlSessionTemplate</span><span class="params">(@Qualifier(<span class="string">"secondarySqlSessionFactory"</span>)</span> SqlSessionFactory sqlSessionFactory) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>到这里配置已经好了，剩下的就是结合业务去实现了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="后端笔记" scheme="https://fatboa.co/categories/%E5%90%8E%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="springboot" scheme="https://fatboa.co/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://fatboa.co/2018/07/04/hello-world/"/>
    <id>https://fatboa.co/2018/07/04/hello-world/</id>
    <published>2018-07-04T13:53:56.000Z</published>
    <updated>2019-05-10T10:53:39.745Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>    <div id="aplayer-XJNwxmLN" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2197172964" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true"></div><hr><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://fatboa.co/tags/hexo/"/>
    
  </entry>
  
</feed>
